; ModuleID = 'ex_particle_CUDA_naive_seq-host-x86_64-unknown-linux-gnu.bc'
source_filename = "ex_particle_CUDA_naive_seq.cu"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }
%struct.dim3 = type { i32, i32, i32 }
%struct.CUstream_st = type opaque

$_ZSt3powdi = comdat any

$_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

$_ZN4dim3C2Ejjj = comdat any

@M = dso_local global i64 2147483647, align 8
@A = dso_local global i32 1103515245, align 4
@C = dso_local global i32 12345, align 4
@.str = private unnamed_addr constant [17 x i8] c"\0ACUDA error: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"TIME TO GET NEIGHBORS TOOK: %f\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"TIME TO GET WEIGHTSTOOK: %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"TIME TO SET ERROR TOOK: %f\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"TIME TO GET LIKELIHOODS TOOK: %f\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"TIME TO GET EXP TOOK: %f\0A\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"TIME TO SUM WEIGHTS TOOK: %f\0A\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"TIME TO NORMALIZE WEIGHTS TOOK: %f\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"TIME TO MOVE OBJECT TOOK: %f\0A\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"XE: %lf\0A\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"YE: %lf\0A\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"TIME TO CALC CUM SUM TOOK: %f\0A\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"TIME TO CALC U TOOK: %f\0A\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"SENDING TO GPU TOOK: %lf\0A\00", align 1
@.str.15 = private unnamed_addr constant [21 x i8] c"CUDA EXEC TOOK: %lf\0A\00", align 1
@.str.16 = private unnamed_addr constant [33 x i8] c"SENDING BACK FROM GPU TOOK: %lf\0A\00", align 1
@.str.17 = private unnamed_addr constant [41 x i8] c"TIME TO CALC NEW ARRAY X AND Y TOOK: %f\0A\00", align 1
@.str.18 = private unnamed_addr constant [32 x i8] c"TIME TO RESET WEIGHTS TOOK: %f\0A\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"output\0A\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%lf \00", align 1
@.str.21 = private unnamed_addr constant [56 x i8] c"naive.out -x <dimX> -y <dimY> -z <Nfr> -np <Nparticles>\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"-x\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"-y\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"-z\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"-np\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.28 = private unnamed_addr constant [31 x i8] c"ERROR: dimX input is incorrect\00", align 1
@.str.29 = private unnamed_addr constant [18 x i8] c"dimX must be > 0\0A\00", align 1
@.str.30 = private unnamed_addr constant [31 x i8] c"ERROR: dimY input is incorrect\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"dimY must be > 0\0A\00", align 1
@.str.32 = private unnamed_addr constant [43 x i8] c"ERROR: Number of frames input is incorrect\00", align 1
@.str.33 = private unnamed_addr constant [30 x i8] c"number of frames must be > 0\0A\00", align 1
@.str.34 = private unnamed_addr constant [46 x i8] c"ERROR: Number of particles input is incorrect\00", align 1
@.str.35 = private unnamed_addr constant [33 x i8] c"Number of particles must be > 0\0A\00", align 1
@.str.36 = private unnamed_addr constant [24 x i8] c"VIDEO SEQUENCE TOOK %f\0A\00", align 1
@.str.37 = private unnamed_addr constant [25 x i8] c"PARTICLE FILTER TOOK %f\0A\00", align 1
@.str.38 = private unnamed_addr constant [24 x i8] c"ENTIRE PROGRAM TOOK %f\0A\00", align 1
@0 = private unnamed_addr constant [23 x i8] c"_Z6kernelPdS_S_S_S_S_i\00", align 1
@1 = private constant [11281 x i8] c"P\EDU\BA\01\00\10\00\00,\00\00\00\00\00\00\02\00\01\01@\00\00\00\08\1F\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\01\00=\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\7FELF\02\01\013\07\00\00\00\00\00\00\00\02\00\BE\00e\00\00\00\00\00\00\00\00\00\00\00`\1E\00\00\00\00\00\00 \1C\00\00\00\00\00\00=\05=\00@\008\00\03\00@\00\09\00\01\00\00.shstrtab\00.strtab\00.symtab\00.symtab_shndx\00.nv.info\00.text._Z6kernelPdS_S_S_S_S_i\00.nv.info._Z6kernelPdS_S_S_S_S_i\00.nv.shared._Z6kernelPdS_S_S_S_S_i\00.nv.global\00.nv.constant0._Z6kernelPdS_S_S_S_S_i\00\00.shstrtab\00.strtab\00.symtab\00.symtab_shndx\00.nv.info\00_Z6kernelPdS_S_S_S_S_i\00.text._Z6kernelPdS_S_S_S_S_i\00.nv.info._Z6kernelPdS_S_S_S_S_i\00.nv.shared._Z6kernelPdS_S_S_S_S_i\00.nv.global\00blockIdx\00blockDim\00threadIdx\00.nv.constant0._Z6kernelPdS_S_S_S_S_i\00_param`d\00\01\00\87\00\80\07\98L\01\01\87\FB\FF\FF\0F\1C\00\00w\03\00\00\C8\F0\EF\1F\E0\FD\03\BC\7F\00\07\01\07\00\80\03l[\0F\00\80\00\00\00@\E2\C0\00\10\00\00\00\A0\E3\EF\1F\E0!\03\BC\7F\00\00\01\F7\0F\00\00\10\\\00\0A\07\00\00\00\E0\\\02\00\07\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\00\F7\0F\80\07\98\\\00\00'\00\80\07\98\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\00\07\00\80\07\98\\\03\007\00\80\07\98\\\06\00\17\00\80\07\98L\EF\1F\E0\FD\03\BC\7F\00\00\00\17\04\80\07\98L\06\02g\00\00\80\10\\\00\03\07\00\00\08\10\\\EF\1F\E0!\03\BC\7F\00\02\F0\07\17\00\00\00\01\02\02\07\00\00\00\94\EF\07\00'\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\02\F0\87\16\00\00\00\01\02\02\07\00\00\00\95\EF\04\00'\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\007\00\80\07\98\\\03\00G\00\80\07\98\\\02\00'\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\04\F0\07\16\00\00\00\01\04\04\07\00\00\00\95\EF\08\00G\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00W\00\80\07\98\\\05\00\87\00\80\07\98\\\04\00G\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\08\F0\87\15\00\00\00\01\08\08\07\00\00\00\95\EF\0A\00\87\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\09\00\97\00\80\07\98\\\08\00\A7\00\80\07\98\\\09\00\97\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\0A\F0\07\15\00\00\00\01\0A\0A\07\00\00\00\95\EF\0E\00\A7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0F\00\B7\00\80\07\98\\\0E\00\E7\00\80\07\98\\\0F\00\F7\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\0A\F0\87\14\00\00\00\01\0A\0A\07\00\00\00\95\EF\0C\00\A7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0D\00\B7\00\80\07\98\\\0A\00\C7\00\80\07\98\\\0D\00\D7\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\10\F0\07\14\00\00\00\01\10\10\07\00\00\00\95\EF\0B\00\07\01\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0C\00\17\01\80\07\98\\\0B\00\B7\00\80\07\98\\\0C\00\C7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\02\00'\00\80\07\98\\\03\03'\00\00\04G\\\EF\1F\E0\FD\03\BC\7F\00\02\03'\00\00\04G\\\03\03'\00\00\04G\\\02\00'\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\04\00G\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\05\05G\00\00\04G\\\04\05G\00\00\04G\\\05\05G\00\00\04G\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\08\00\87\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\09\00\97\00\80\07\98\\\08\00\87\00\80\07\98\\\09\00\97\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\08\00\87\00\80\07\98\\\09\00\97\00\80\07\98\\\0E\00\E7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0F\00\F7\00\80\07\98\\\0E\00\E7\00\80\07\98\\\0F\00\F7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0E\00\E7\00\80\07\98\\\0F\00\F7\00\80\07\98\\\0A\00\A7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0D\00\D7\00\80\07\98\\\10\00\A7\00\80\07\98\\\11\00\D7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\10\00\07\01\80\07\98\\\11\00\17\01\80\07\98\\\0B\00\B7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0A\00\C7\00\80\07\98\\\0B\0B\A7\00\00\04G\\\0A\0B\A7\00\00\04G\\\EF\1F\E0\FD\03\BC\7F\00\0B\0B\A7\00\00\04G\\\0A\00\A7\00\80\07\98\\\0B\00\B7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0D\06\F7\0F\00\80\10\\\12\00\F7\0F\00\08\10\\\0D\00\D7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\12\00'\01\80\07\98\\\0C\0D\F7\0F\00\80\D7[\0D\0D\F7\0F@\09\D8[\EF\1F\E0\FD\03\BCg\00\0C\00\C7\00\80\07\98\\\0D\00\D7\00\80\07\98\\\0A\0C\07\00\00\00\B0\A0\EF\1F\E0\FD\03\BC\7F\00\0B\06\87\00\00\00\10\1C\0C\00\F7\0F\00\08\10\\\0B\00\B7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0C\00\C7\00\80\07\98\\\0A\0B\F7\0F\00\80\D7[\0B\0B\F7\0F@\06\D8[\EF\1F\E0\FD\03\BCg\00\0A\00\A7\00\80\07\98\\\0B\00\B7\00\80\07\98\\\10\0A\07\00\00\00\B0\A0\EF\1F\E0\FD\03\BC\7F\00\0B\06\07\01\00\00\10\1C\0C\00\F7\0F\00\08\10\\\0B\00\B7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0C\00\C7\00\80\07\98\\\0A\0B\F7\0F\00\80\D7[\0B\0B\F7\0F@\06\D8[\EF\1F\E0\FD\03\BCg\00\0A\00\A7\00\80\07\98\\\0B\00\B7\00\80\07\98\\\0E\0A\07\00\00\00\B0\A0\EF\1F\E0\FD\03\BC\7F\00\0B\06\87\01\00\00\10\1C\0C\00\F7\0F\00\08\10\\\0B\00\B7\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0C\00\C7\00\80\07\98\\\0A\0B\F7\0F\00\80\D7[\0B\0B\F7\0F@\06\D8[\EF\1F\E0\FD\03\BCg\00\0A\00\A7\00\80\07\98\\\0B\00\B7\00\80\07\98\\\08\0A\07\00\00\00\B0\A0\EF\1F\E0\FD\03\BC\7F\00\09\06\07\02\00\00\10\1C\0A\00\F7\0F\00\08\10\\\09\00\97\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\0A\00\A7\00\80\07\98\\\08\09\F7\0F\00\80\D7[\09\09\F7\0F@\05\D8[\EF\1F\E0\FD\03\BCg\00\08\00\87\00\80\07\98\\\09\00\97\00\80\07\98\\\04\08\07\00\00\00\B0\A0\EF\1F\E0\FD\03\BC\7F\00\05\06\87\02\00\00\10\1C\08\00\F7\0F\00\08\10\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\08\00\87\00\80\07\98\\\04\05\F7\0F\00\80\D7[\05\05\F7\0F@\04\D8[\EF\1F\E0\FD\03\BCg\00\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\02\04\07\00\00\00\B0\A0\EF\1F\E0\FD\03\BC\7F\00\03\06\07\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\EF\1F\E0\FD\03\BCg\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\07\02\07\00\00\00\90\A0\0F\19\E0\FD\03\BC\7F\00\04\00W\02\00\00\C8\F0\04\00G\00\80\07\98\\\03\06G\03\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\05\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0=\03\BC\7F\00\03\007\00\80\07\98\\\04\02\07\00\00\00\90\A0\04\00'\00\80\07\98L\EF\1F\E0\FD\03\BC\7F\00\03\06G\03\00\00\10\1C\05\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\05\00W\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F\C0\02\D8[\EF\1F\E0\FD\03<d\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\02\02\07\00\00\00\90\80\0F\19\E0!\03\BC\7F\00\02\04'\00\00\038\\\03\00\17\02\00\00\C8\F0\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\027\00\00\00\10\\\03\06\87\03\00\00\10\1C\05\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\EF\19\E0\FD\03\BC\7F\00\04\02\07\00\00\00\90\A0\03\06\87\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\04\02\07\00\00\00\90\80\03\06\07\03\00\00\10\1C\05\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\90\80\07\04'\00\80\03m[\06\00g\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\00\00\07\00\80\07\98\\\0F\00\80\DD\00\00@\E2\0F\00\07\00\00\00@\E2\EF\1F\E0\FD\03\BC\7F\00\05\F0\F7\FF\FF\FF\0F\01\03\06\C7\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\EF\19\E0\FD\03\BC\7F\00\05\02\07\00\00\00\90\A0\05\00\F7\0F\80\07\98\\\03\06\07\04\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0=\03\BC\7F\00\03\007\00\80\07\98\\\05\02\07\00\00\00\90\A0\00\00\00Z\00\00\A0\E2\EF\1F\E0\FD\03\BC\7F\00\0F\00\07\00\00\00@\E2\03\06\07\04\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\04\02\07\00\00\00\90\80\03\06\07\03\00\00\10\1C\05\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\90\80\07\04'\00\80\03m[\0F\00\00\00\00\00@\E3\EF\1F\E0\FD\03\BC\7F\00\0F\00\07\00\00\00@\E2\03\06\07\01\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\B0\80\05\00'\00\80\07\98\\\07\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\06\07\04\00\00\10\1C\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\EF\1F\E0\FD\03<d\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\02\02\07\00\00\00\90\80\0F\19\E0\FD\03\BC\7F\00\02:'\00\00\00\E0\\\03\02\F7\01\00\00)8\02\00'\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\027\00\C0\01\F86\03\027\00\00\00H8\EF\1F\E0\FD\03\BC\7F\00\03\057\00\00\80\10\\\04\07G\00\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\EF\1F\E0\FD\03<d\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\02\02\07\00\00\00\B0\80\EF\1F\E0\FD\03\BC\7F\00\05\06\87\01\00\00\10\1C\07\00\F7\0F\00\08\10\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\07\00w\00\80\07\98\\\04\05\F7\0F\00\80\D7[\05\05\F7\0F\C0\03\D8[\EF\1F\E0\FD\03<d\00\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\04\04\07\00\00\00\B0\80\EF\1F\E0\FD\03\BC\7F\00\08\00G\00\80\07\98\\\09\00W\00\80\07\98\\\05\06\87\03\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\07\00\F7\0F\00\08\10\\\05\00W\00\80\07\98\\\07\00w\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\05\F7\0F\00\80\D7[\05\05\F7\0F\C0\03\D8[\04\00G\00\80\07\98\\\EF\1F\E0!\03<d\00\05\00W\00\80\07\98\\\04\04\07\00\00\00\90\80\04:G\00\00\00\E0\\\EF\1F\E0\FD\03\BC\7F\00\05\04\F7\01\00\00)8\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\07\047\00\C0\02\F86\05\047\00\00\00H8\05\08W\00\00\80\10\\\EF\1F\E0\FD\03\BC\7F\00\07\09w\00\00\08\10\\\05\00W\00\80\07\98\\\07\00w\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\05\F7\0F\00\80\D7[\05\05\F7\0F\C0\03\D8[\04\00G\00\80\07\98\\\EF\1F\E0!\03<d\00\05\00W\00\80\07\98\\\04\04\07\00\00\00\B0\80\07\02G\00\80\03\89[\EF\1F\E0\FD\03\BC\7F\00\0F\00\00\0D\00\00@\E2\0F\00\07\00\00\00@\E2\03\06\07\04\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\03\007\00\80\07\98\\\04\02\07\00\00\00\90\80\03\06\C7\03\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\05\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0=\03\BC\7F\00\03\007\00\80\07\98\\\04\02\07\00\00\00\90\A0\0F\00\07\00\00\00@\E3\EF\1F\E0\FD\03\BC\7F\00\0F\00\07\00\00\00@\E2\03\06\07\04\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\90\80\04\02\17\00\00\00\00\1C\03\06\07\04\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\05\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0=\03\BC\7F\00\03\007\00\80\07\98\\\04\02\07\00\00\00\90\A0\0F\00\07\A7\FF\0F@\E2\EF\1F\E0\FD\03\BC\7F\00\03\06\C7\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\EF\1F\E0\FD\03<d\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\02\02\07\00\00\00\90\80\EF\1F\E0\FD\03\BC\7F\00\07\02\F7\FF\FF\03k7\00\00\80\0F\00\00\90\E2\0F\00\00\00\00\00\F8\F0\EF\1F\E0\FD\03\BC\7F\00\0F\00\07\00\00\00@\E2\03\06\07\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\90\80\04\02\F7\FF\FF\FF\0F\1C\03\06\C7\03\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\05\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F\C0\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0=\03\BC\7F\00\03\007\00\80\07\98\\\04\02\07\00\00\00\90\A0\0F\00\07\00\00\00\F8\F0\EF\1F\E0\FD\03\BC\7F\00\0F\00\07\00\00\00\F8\F0\03\06\F7\0F\00\80\10\\\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\B0\80\05\00'\00\80\07\98\\\07\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\06\C7\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\EF\1F\E0\FD\03<d\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\02\02\07\00\00\00\90\80\0F\19\E0\FD\03\BC\7F\00\02:'\00\00\00\E0\\\03\02\F7\01\00\00)8\02\00'\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\027\00\C0\01\F86\03\027\00\00\00H8\EF\1F\E0\FD\03\BC\7F\00\03\057\00\00\80\10\\\04\07G\00\00\08\10\\\03\007\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\EF\1F\E0\FD\03<d\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\02\02\07\00\00\00\B0\80\EF\1F\E0\FD\03\BC\7F\00\05\06\07\02\00\00\10\1C\07\00\F7\0F\00\08\10\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\07\00w\00\80\07\98\\\04\05\F7\0F\00\80\D7[\05\05\F7\0F\C0\03\D8[\EF\1F\E0\FD\03<d\00\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\04\04\07\00\00\00\B0\80\EF\1F\E0\FD\03\BC\7F\00\08\00G\00\80\07\98\\\09\00W\00\80\07\98\\\05\06\87\03\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\07\00\F7\0F\00\08\10\\\05\00W\00\80\07\98\\\07\00w\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\05\F7\0F\00\80\D7[\05\05\F7\0F\C0\03\D8[\04\00G\00\80\07\98\\\EF\1F\E0!\03<d\00\05\00W\00\80\07\98\\\04\04\07\00\00\00\90\80\04:G\00\00\00\E0\\\EF\1F\E0\FD\03\BC\7F\00\05\04\F7\01\00\00)8\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\07\047\00\C0\02\F86\05\047\00\00\00H8\05\08W\00\00\80\10\\\EF\1F\E0\FD\03\BC\7F\00\07\09w\00\00\08\10\\\05\00W\00\80\07\98\\\07\00w\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\04\05\F7\0F\00\80\D7[\05\05\F7\0F\C0\03\D8[\04\00G\00\80\07\98\\\EF\1F\E0=\03\BC\7F\00\05\00W\00\80\07\98\\\02\04\07\00\00\00\B0\A0\03\06\87\00\00\00\10\1C\EF\1F\E0\FD\03\BC\7F\00\04\00\F7\0F\00\08\10\\\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\02\03\F7\0F\00\80\D7[\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\EF\1F\E0!\03\BC\7F\00\03\007\00\80\07\98\\\02\02\07\00\00\00\B0\80\05\00'\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\07\007\00\80\07\98\\\03\06\C7\03\00\00\10\1C\04\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0!\03\BC\7F\00\02\02\07\00\00\00\90\80\02:'\00\00\00\E0\\\03\02\F7\01\00\00)8\EF\1F\E0\FD\03\BC\7F\00\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\04\027\00\C0\01\F86\EF\1F\E0\FD\03\BC\7F\00\03\027\00\00\00H8\03\057\00\00\80\10\\\04\07G\00\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\03\007\00\80\07\98\\\04\00G\00\80\07\98\\\02\03\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\03\03\F7\0F@\02\D8[\02\00'\00\80\07\98\\\03\007\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\02\02\07\00\00\00\B0\80\05\06\87\02\00\00\10\1C\07\00\F7\0F\00\08\10\\\EF\1F\E0\FD\03\BC\7F\00\05\00W\00\80\07\98\\\07\00w\00\80\07\98\\\04\05\F7\0F\00\80\D7[\EF\1F\E0\FD\03\BC\7F\00\05\05\F7\0F\C0\03\D8[\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\0F\19\E0\FD\03\BC\7F\00\04\04\07\00\00\00\B0\80\07\00G\00\80\07\98\\\08\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\05\06\87\03\00\00\10\1C\00\00\F7\0F\00\08\10\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\00\00\07\00\80\07\98\\\04\05\F7\0F\00\80\D7[\05\05\F7\0F@\00\D8[\EF\1F\E0\FD\03<d\00\04\00G\00\80\07\98\\\05\00W\00\80\07\98\\\04\04\07\00\00\00\90\80\0F\19\E0\FD\03\BC\7F\00\04:G\00\00\00\E0\\\00\04\F7\01\00\00)8\04\00G\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\00\00\07\00\80\07\98\\\00\047\00@\00\F86\05\047\00\00\00H8\EF\1F\E0\FD\03\BC\7F\00\05\07W\00\00\80\10\\\00\08\07\00\00\08\10\\\05\00W\00\80\07\98\\\EF\1F\E0\FD\03\BC\7F\00\00\00\07\00\80\07\98\\\04\05\F7\0F\00\80\D7[\05\05\F7\0F@\00\D8[\EF\1F\E0\FD\03\BCgp\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\C0\02\00\00\00\00\00\000\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00O\00\00\00\00\00\00p\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0\02\00\00\00\00\00\00\A4\00\00\00\00\00\00\00\03\00\00\00\07\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9C\00\00\00\01\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\94\03\00\00\00\00\00\00t\01\00\00\00\00\00\00\00\00\00\00\07\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\002\00\00\00\01\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \05\00\00\00\00\00\00\00\17\00\00\00\00\00\00\03\00\00\00\07\00\00\13 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\91\00\00\00\08\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \1C\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\05\00\00\00`\1E\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\A8\00\00\00\00\00\00\00\A8\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\01\00\00\00\05\00\00\00\94\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00t\18\00\00\00\00\00\00t\18\00\00\00\00\00\00\08\00\00\00\00\00\00\00\01\00\00\00\06\00\00\00 \1C\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\01\00\01\01H\00\00\00p\0C\00\00\00\00\00\00m\0C\00\00@\00\00\00\04\00\06\00=\00\00\00\00\00\00\00\00\00\00\00\11 \00\00\00\00\00\00\00\00\00\00\00\00\00\00k1\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F0 \0A\0A\0A\0A.version 6.4\0A.target sm_61\0A.address_size 64.\00\FF\11global .align 1 .b8 blockIdx[1];\22\00\08?Dim\22\00\07dthreadE\00\F0\0B\0A.weak .func (.param .b32 \12\00\F5\07_retval0) cudaMalloc(\0A&\00'64\18\00\11_\16\00?_0, \00\0B\A61\0A)\0A{\0A.loc\99\00\118\99\00!__\15\00\A0_depot0[16\C2\002regI\00;%SP\0F\00\15L\10\00\8932 %r<2>!\00\D3rd<3>;\0A\0Amov.u2\00\1B,e\00b;\0Acvta\8D\00\04%\00\13,\\\00\22ld\C8\00\02\18\00nrd2, [\CE\00\1E])\00\1F1)\00\01a0];\0Ast#\00\81[%SP+0],,\00\0A\16\00\128\16\00\222;\B6\00\01\D8\00a1, 999(\00\02g\00\00\EF\00\18[\9E\01\03M\00\AF1;\0Aret;\0A\0A}\D6\01\1A\FE\02FuncGetAttributes\E1\01\0D#\00\0E\EC\01\0F+\00\06\0F\F7\01\1B\1F1\F7\01Q\1F1\F7\01!\0E\D9\00\0F\02\02\0F\0E8\01\0F\0D\02\8DhDevice\B4\00\0E\0E\02\0E$\00\0F\0F\02\00/32,\00\0B\1F1,\00\18\1F2<\02\13\1F2<\02\1F\1D4<\02\1F2<\02\0C\1F2<\02\13\01_\00\04;\02\0F\D9\00\07\1D]4\00\1F14\00\06\0Fp\02\10\0E\9A\01\0Fq\02\12(32q\02\0B\15\00!12\16\00\09\86\02\1F3\86\02\15\1F3\86\02#2Get\CB\00\0E}\02\05\1B\00\04\DA\00\0F\1C\02\13?3[8W\04.\0F\1B\02\0D\1F3W\04\19\04\B3\01\0D\D0\00\0F\AA\01\06\0F\05\04W\F0\04OccupancyMaxActiveBV\08\FE\03sPerMultiprocessor\9F\01\0F;\00\16\0EB\06\0FC\00%\0EJ\04\0FC\00\1E\1F2\86\00/\1F3\88\02\13O4[32\89\02\1C\1D3\89\02\1F4\89\02\0C\1F4\89\02\19\133\89\02\0F\F1\00\1E\0F\BC\04\00\0FK\00$/2]w\07\00\0FL\00$\0F\1F\05\01\0F\98\00%\0F\A7\07\1D\097\05\186M\05\04,\00\2224-\00\183\CF\03\1F2\CF\03\15\1F2\CF\03L\9FWithFlags\D8\03(\05D\00\0E\E1\03\0FL\00'\0F\EA\030\0CL\00\1F2\98\008\1F3\98\008\1F4H\04\13O5[40\EC\08.\0FH\04\0D\1F5\EC\08\1C\0F\F9\00+\1F]\9C\040\0D\9A\01\0F\A5\040\0D:\02\0F\AE\041\0D\DB\02\0F\B7\041\0D|\03\0F\C0\04I\08-\00\1F3$\0A6\7Fvisible\D9\04\0F\FA\05_Z12findIndexSeqPdid\B7\04\0F\22\00\01\0F\A9\0C\03\0F*\00\08/1,T\00\0E\0F\A5\0C\1B\1F6\B9\03\18xpred %p\BA\03\02\CB\03\161\12\00\10f4\00/fd\DE\03\00\1F6\DE\03\0C\1F6\DE\03\12\03`\00\00\8C\02\0F\FD\00\01\0F\C9\0C\07\0F2\00\0C\0F\F1\02\00\0Fe\00\0D/0]\B9\02\02\1F1\B9\02\08\1Af\B9\02;fd1y\07/-1\CA\02\12\1B0&\00\146\BA\02\F2\01bra.uni LBB6_1;\0A\08\00\10:\DB\00\02=\00%4,3\00\16;\16\00%5,\AD\00\B0;\0Asetp.ge.s\1B\002p1,6\00\D2%r5;\0A@%p1 bra`\00\1B6p\00\132p\00\122p\00\06\8B\04\02\1E\01\01p\00\01U\00\02J\05\05\87\004shl&\02#4,\1E\00\823;\0Aadd.s\17\00#5,K\00\00#\00\01H\00\03\08\02\01^\00Hrd5]\15\00%3,e\01\03\CE\002ltu\1D\003p2,7\00\00(\00\01\D1\00\162\D1\00\1B4\D1\00\133\D1\00\173A\01\198\BA\00\0E\AB\01\1B8D\00\136D\00*4:\18\00\135\18\00\175\\\00\186\\\00$ad.\01\227,\1C\00\1F1\F6\01\02\1F7\F6\01\04\176Y\00%9,\A4\00\03\12\01\14n\E0\01\223, \00!-1\0E\01\163\0E\01\0C\CA\00\137Y\00\177Y\00(11:\02\06\B3\00312,\1E\00\0C\D2\02\03\0A\0E\1B2]\00\139]\00\188]\00\190\B7\00\0EE\00\1F0E\00\04\189E\00\04\0E\02/0]\A2\0E\11\0F\FE\050oBinPdi\FF\05\0A\04#\00\0F\00\06\10\0B+\00\1F1+\00\17/2,\81\00\0F\0F.\0E\1B\1F7-\06 ,13.\06\1E3.\06\1F1\DE\10\00\0F\DF\10\0D\1F70\06*\0C\01\01\1E]B\0A\0F3\00\03\0Fd\06\1A\0C\BD\01\0Fe\06\11\0C\1C\02\0Ff\06\1F\05\16\00\152\A8\0D\0F|\06\04&ldT\06\042\00\1E;-\06\0F\17\06\00\223,6\00:%r48\04*7_\DB\03\137\91\04\107\87\06\07\C5\06\1F2\1B\04\05\1C3@\00#24A\00*2:\19\00\133\18\00\08\9F\05\1F5\C9\00\02\1D6\C9\00\14l\C9\00\02\DB\06\01b\05\01\C9\00\174\C9\00\1B3\8A\00\04\89\00\1F4\10\06\00\01[\00\0Dq\05\01\87\00Usub.s\D2\04\01\1D\00\01(\067shrG\05\02\1E\00/31G\05\00\120M\05\022\00\15s\D7\04\02 \00\0A1\00\01\CF\00\148\CB\04\0F\15\0B\00?14;\9E\07\17\1F2\9E\07\\\1D5\9E\07\165\8F\01+19\8F\01\135\8F\01\08C\07/15\EB\06\07#6,!\00\110[\00\166[\00\1B7Z\00\136Z\00\08D\07/31\8E\06\0B/31\B8\02\05\187\10\09\1A6r\01\03\B6\00\186\\\00\07G\07#7,\1E\00\12-%\1A\00s\01\04\A6\01\02\1C\00\197\A2\01#8,\1A\00\0A\A2\01#9,{\00\00#\00\08\8D\01\124\A2\01\199\A2\01\1D5\A2\01$ge\A2\01#7,7\00\00(\00\01G\01\167G\01\0C\A1\01\138\01\01\08\D5\07\1F3\D5\07\0C/30G\01\05\189G\01/10H\01\02\1F8H\01\04#9,\1E\00\0FH\01\00\03}\03\199I\01\02z\03\01\1C\00\0AK\01\02y\03\12d\94\038d129\01\126N\01)13O\01\1D7O\01\15nO\01#8,8\00\00(\00\01O\01\178\F1\02\1C6J\05\140K\05\1B0\0B\05\151e\05\191&\01\1F8\E0\03\02/19\E1\03\04\132\D6\00\1C9\F6\00421,P\00\01'\00\08\E0\00\02\8B\01\00$\00\09\F7\00/11\F8\00\08\01t\01\02;\00\01+\00\02\E0\0C\034\08\00\16\00\1A0\12\00!2,\18\00\02\82\0C\171#\01\0C\A3\05$12\09\01\172u\02-24\16\04(gt\E1\0C\2224\1B\02\0Et\00\0C`\00\04u\06813:.\00\02-\00W2;\0A@!S\0CL7_15A\00\04\CF\02\181F\06\1F2\B9\02\04329,\1E\00\0F\1A\0E\05/9;\0A\02\05\08\17\05/25`\00\04#6,\1E\00\0F_\00\04\176^\03/27\BB\03\0B/27\BB\03\05,16\B0\02\147\1A\00\1C7\1A\00\045\04,18\1A\00\149\1A\00\0A\0A\04\1F4\E4\02\03\1F5\E4\02\04\00N\05\03 \00\0B\DA\03$7,P\00\01'\00\08\CD\02\138\DA\03\197\E3\02\1E9\CB\06\05\E2\02#9,8\00\00(\00\01\B8\02\179Z\08\0D,\06\04\DA\03(20\B6\01\1F2\B6\01\04\01\84\04\1E2C\09\05\F2\09\0C\17\03\142\17\03\182\0D\10/20`\00\04\02\14\03\1D0\16\02\03g\0A/21_\00\06\0F\A4\09\05(23\FE\09\1F7\FD\09\05\0FB\02\06\182.\03\1F3\D4\0D\1A\1F3\D4\0D\03\F4\04entry _Z6kernelPdS_\02\00\16i\BB\0D\00e\02\0F$\00\03\0E\BC\0D\0F,\00\0E\1F1,\00\18\1F2,\00\18\1F3,\00\18\1F4,\00\18\175,\00/32,\00\0B\1F6C\0E\13O8[72C\0E\1D\1C5B\0E-20B\0E\1E5N\18\0Fw#\0D\1F8O\18\18\02\A6\0D\0F\FF\00\09\0F\DB\0D\00\1F65\00\0D\1F55\00\00\1F55\00\0D\0F\99\18\01\1F45\00\0D\1F3\CE\18\01\0F5\00\0D\0FZ\18\02\0F5\00\06\0F\E4\0E\0E\0FE\03\09\13]\8C\01#to$(\04;\00\02\94\05\04\1C\16\0A\1C\00\03\ED\0A\0F;\00\05\02\F5\0A\1F5;\00\02\03\BF\09\1F9<\00\05$11\CE\0C\0F=\00\01\04\1C\0A\0F>\00\06\143\96\18\0F>\00\01\03`\06\1F3>\00\06\03P\0D\0F>\00\03\04\BE\06\0F>\00\06\03\C6\06\0F>\00\03\023\01/17\89\19\03\1F8k\10\03\1A6\17\00\03\05\06?d14\8D\19\03*12\18\00\03K\08:d10\18\00\134w\00\1A8\09\06\154\F7#\09\1A\17\8A%ctaid.x-\00\1F5 \17\032%nt,\00\0D\CB\10\105\D5\02cmul.lo\ED\06\185\CA\10\06F\00\00h\01\03E\00\0B\8A\15\04-\10\09\88\00\05\8C\15\0D\19\10\1F5\19\10\02/48j\17\03\01\A1\01\1A9j\17+8_\EA\14\138T\11\1A8T\11.10W\07\166+\15\07\B1#\1D1C\18464]e\10\09i\00\132i\00\08N\0B\00\00\03\045\00\1E;j\15\0F\DC\00\01&2,\CE\10\0Bw\17\1B8~\0F\1384\0898_3\E7\09\1B9i\11\03\E8\09(20\8D\00\08\CC\0C$1, \00\0B\CC\0C\152\E5\0C\01'\00\09\B5\0C\03\CB\0C)2]&\11\09\B4\10\07|\00\184\E4\01\08|\00\03\C3\03\1D4|\00$6,Q\00\01'\00\0F.\11\00.26\18\11#3,\9D\00\00'\00\0Ap\13;8_5?\01\134?\01/4:a\10\00\02&\01\0F!\02\00\1B6F\00\137F\00*5:\18\00\136\18\00\08\1B\11(14^\00\07w\0F#5,\1E\00\1F1n\02\03\1F5n\02\04\09c\18%7,\AA\00\0C\D2\11#4,!\00*-1\BD\13\1B8\8C\10\138\8C\10\1A8a\18\188\B2\02\0E/\10\0FO\03\07\0C^\00\139^\00\09\9A\0C\050\0D\1A06\02\198\D1\00\076\02\03\92\02\1C86\02\004\11\03P\00\01'\00\0DO\13\00#\00\09\B2\02\0A\AD\12\07\DA\13\1F2\B2\02\04\00S\0B\03 \00\0B|\00$4,Q\00\01'\00\07L\16\00\1D\00\14]\AC\13\07|\00\1F5U\14\03\1F6\F7\00\04437, \00\0B{\00$8,P\00\01'\00\0F\B9\12\00*38\F7\00\05_\05\0As\01/40\F7\00\04\134\E8\07\0D%\04442,Q\00\01'\00\09\F7\00\2242\F7\00\1C4\96\05\140\97\05\B00:\0Aret;\0A\0A}\0A\00\00\00\00", section ".nv_fatbin", align 8
@__cuda_fatbin_wrapper = internal constant { i32, i32, i8*, i8* } { i32 1180844977, i32 1, i8* getelementptr inbounds ([11281 x i8], [11281 x i8]* @1, i64 0, i64 0), i8* null }, section ".nvFatBinSegment", align 8
@__cuda_gpubin_handle = internal global i8** null, align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* bitcast (void (i8*)* @__cuda_module_ctor to void ()*), i8* null }]

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @_Z8get_timev() #0 {
entry:
  %tv = alloca %struct.timeval, align 8
  %call = call i32 @gettimeofday(%struct.timeval* %tv, %struct.timezone* null) #10
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0
  %0 = load i64, i64* %tv_sec, align 8
  %mul = mul nsw i64 %0, 1000000
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1
  %1 = load i64, i64* %tv_usec, align 8
  %add = add nsw i64 %mul, %1
  ret i64 %add
}

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local float @_Z12elapsed_timexx(i64 %start_time, i64 %end_time) #0 {
entry:
  %start_time.addr = alloca i64, align 8
  %end_time.addr = alloca i64, align 8
  store i64 %start_time, i64* %start_time.addr, align 8
  store i64 %end_time, i64* %end_time.addr, align 8
  %0 = load i64, i64* %end_time.addr, align 8
  %1 = load i64, i64* %start_time.addr, align 8
  %sub = sub nsw i64 %0, %1
  %conv = sitofp i64 %sub to float
  %div = fdiv float %conv, 1.000000e+06
  ret float %div
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z11check_error9cudaError(i32 %e) #2 {
entry:
  %e.addr = alloca i32, align 4
  store i32 %e, i32* %e.addr, align 4
  %0 = load i32, i32* %e.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %e.addr, align 4
  %call = call i8* @cudaGetErrorString(i32 %1)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8* %call)
  call void @exit(i32 1) #11
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i8* @cudaGetErrorString(i32) #3

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z6kernelPdS_S_S_S_S_i(double* %arrayX, double* %arrayY, double* %CDF, double* %u, double* %xj, double* %yj, i32 %Nparticles) #2 {
entry:
  %arrayX.addr = alloca double*, align 8
  %arrayY.addr = alloca double*, align 8
  %CDF.addr = alloca double*, align 8
  %u.addr = alloca double*, align 8
  %xj.addr = alloca double*, align 8
  %yj.addr = alloca double*, align 8
  %Nparticles.addr = alloca i32, align 4
  %grid_dim = alloca %struct.dim3, align 8
  %block_dim = alloca %struct.dim3, align 8
  %shmem_size = alloca i64, align 8
  %stream = alloca i8*, align 8
  %grid_dim.coerce = alloca { i64, i32 }, align 8
  %block_dim.coerce = alloca { i64, i32 }, align 8
  store double* %arrayX, double** %arrayX.addr, align 8
  store double* %arrayY, double** %arrayY.addr, align 8
  store double* %CDF, double** %CDF.addr, align 8
  store double* %u, double** %u.addr, align 8
  store double* %xj, double** %xj.addr, align 8
  store double* %yj, double** %yj.addr, align 8
  store i32 %Nparticles, i32* %Nparticles.addr, align 4
  %kernel_args = alloca i8*, i64 7, align 16
  %0 = bitcast double** %arrayX.addr to i8*
  %1 = getelementptr i8*, i8** %kernel_args, i32 0
  store i8* %0, i8** %1
  %2 = bitcast double** %arrayY.addr to i8*
  %3 = getelementptr i8*, i8** %kernel_args, i32 1
  store i8* %2, i8** %3
  %4 = bitcast double** %CDF.addr to i8*
  %5 = getelementptr i8*, i8** %kernel_args, i32 2
  store i8* %4, i8** %5
  %6 = bitcast double** %u.addr to i8*
  %7 = getelementptr i8*, i8** %kernel_args, i32 3
  store i8* %6, i8** %7
  %8 = bitcast double** %xj.addr to i8*
  %9 = getelementptr i8*, i8** %kernel_args, i32 4
  store i8* %8, i8** %9
  %10 = bitcast double** %yj.addr to i8*
  %11 = getelementptr i8*, i8** %kernel_args, i32 5
  store i8* %10, i8** %11
  %12 = bitcast i32* %Nparticles.addr to i8*
  %13 = getelementptr i8*, i8** %kernel_args, i32 6
  store i8* %12, i8** %13
  %14 = call i32 @__cudaPopCallConfiguration(%struct.dim3* %grid_dim, %struct.dim3* %block_dim, i64* %shmem_size, i8** %stream)
  %15 = load i64, i64* %shmem_size, align 8
  %16 = load i8*, i8** %stream, align 8
  %17 = bitcast { i64, i32 }* %grid_dim.coerce to i8*
  %18 = bitcast %struct.dim3* %grid_dim to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 12, i1 false)
  %19 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %grid_dim.coerce, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %grid_dim.coerce, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = bitcast { i64, i32 }* %block_dim.coerce to i8*
  %24 = bitcast %struct.dim3* %block_dim to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 12, i1 false)
  %25 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %block_dim.coerce, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %block_dim.coerce, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = bitcast i8* %16 to %struct.CUstream_st*
  %call = call i32 @cudaLaunchKernel(i8* bitcast (void (double*, double*, double*, double*, double*, double*, i32)* @_Z6kernelPdS_S_S_S_S_i to i8*), i64 %20, i32 %22, i64 %26, i32 %28, i8** %kernel_args, i64 %15, %struct.CUstream_st* %29)
  br label %setup.end

setup.end:                                        ; preds = %entry
  ret void
}

declare dso_local i32 @__cudaPopCallConfiguration(%struct.dim3*, %struct.dim3*, i64*, i8**)

declare dso_local i32 @cudaLaunchKernel(i8*, i64, i32, i64, i32, i8**, i64, %struct.CUstream_st*)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @_Z11roundDoubled(double %value) #0 {
entry:
  %retval = alloca double, align 8
  %value.addr = alloca double, align 8
  %newValue = alloca i32, align 4
  store double %value, double* %value.addr, align 8
  %0 = load double, double* %value.addr, align 8
  %conv = fptosi double %0 to i32
  store i32 %conv, i32* %newValue, align 4
  %1 = load double, double* %value.addr, align 8
  %2 = load i32, i32* %newValue, align 4
  %conv1 = sitofp i32 %2 to double
  %sub = fsub contract double %1, %conv1
  %cmp = fcmp olt double %sub, 5.000000e-01
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %newValue, align 4
  %conv2 = sitofp i32 %3 to double
  store double %conv2, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %newValue, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %newValue, align 4
  %conv3 = sitofp i32 %4 to double
  store double %conv3, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %5 = load double, double* %retval, align 8
  ret double %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z5setIfiiPiS_S_S_(i32 %testValue, i32 %newValue, i32* %array3D, i32* %dimX, i32* %dimY, i32* %dimZ) #0 {
entry:
  %testValue.addr = alloca i32, align 4
  %newValue.addr = alloca i32, align 4
  %array3D.addr = alloca i32*, align 8
  %dimX.addr = alloca i32*, align 8
  %dimY.addr = alloca i32*, align 8
  %dimZ.addr = alloca i32*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %testValue, i32* %testValue.addr, align 4
  store i32 %newValue, i32* %newValue.addr, align 4
  store i32* %array3D, i32** %array3D.addr, align 8
  store i32* %dimX, i32** %dimX.addr, align 8
  store i32* %dimY, i32** %dimY.addr, align 8
  store i32* %dimZ, i32** %dimZ.addr, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %x, align 4
  %1 = load i32*, i32** %dimX.addr, align 8
  %2 = load i32, i32* %1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc18, %for.body
  %3 = load i32, i32* %y, align 4
  %4 = load i32*, i32** %dimY.addr, align 8
  %5 = load i32, i32* %4, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end20

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %z, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %6 = load i32, i32* %z, align 4
  %7 = load i32*, i32** %dimZ.addr, align 8
  %8 = load i32, i32* %7, align 4
  %cmp5 = icmp slt i32 %6, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %9 = load i32*, i32** %array3D.addr, align 8
  %10 = load i32, i32* %x, align 4
  %11 = load i32*, i32** %dimY.addr, align 8
  %12 = load i32, i32* %11, align 4
  %mul = mul nsw i32 %10, %12
  %13 = load i32*, i32** %dimZ.addr, align 8
  %14 = load i32, i32* %13, align 4
  %mul7 = mul nsw i32 %mul, %14
  %15 = load i32, i32* %y, align 4
  %16 = load i32*, i32** %dimZ.addr, align 8
  %17 = load i32, i32* %16, align 4
  %mul8 = mul nsw i32 %15, %17
  %add = add nsw i32 %mul7, %mul8
  %18 = load i32, i32* %z, align 4
  %add9 = add nsw i32 %add, %18
  %idxprom = sext i32 %add9 to i64
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom
  %19 = load i32, i32* %arrayidx, align 4
  %20 = load i32, i32* %testValue.addr, align 4
  %cmp10 = icmp eq i32 %19, %20
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body6
  %21 = load i32, i32* %newValue.addr, align 4
  %22 = load i32*, i32** %array3D.addr, align 8
  %23 = load i32, i32* %x, align 4
  %24 = load i32*, i32** %dimY.addr, align 8
  %25 = load i32, i32* %24, align 4
  %mul11 = mul nsw i32 %23, %25
  %26 = load i32*, i32** %dimZ.addr, align 8
  %27 = load i32, i32* %26, align 4
  %mul12 = mul nsw i32 %mul11, %27
  %28 = load i32, i32* %y, align 4
  %29 = load i32*, i32** %dimZ.addr, align 8
  %30 = load i32, i32* %29, align 4
  %mul13 = mul nsw i32 %28, %30
  %add14 = add nsw i32 %mul12, %mul13
  %31 = load i32, i32* %z, align 4
  %add15 = add nsw i32 %add14, %31
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds i32, i32* %22, i64 %idxprom16
  store i32 %21, i32* %arrayidx17, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %32 = load i32, i32* %z, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %z, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc18

for.inc18:                                        ; preds = %for.end
  %33 = load i32, i32* %y, align 4
  %inc19 = add nsw i32 %33, 1
  store i32 %inc19, i32* %y, align 4
  br label %for.cond1

for.end20:                                        ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %34 = load i32, i32* %x, align 4
  %inc22 = add nsw i32 %34, 1
  store i32 %inc22, i32* %x, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @_Z5randuPii(i32* %seed, i32 %index) #0 {
entry:
  %seed.addr = alloca i32*, align 8
  %index.addr = alloca i32, align 4
  %num = alloca i32, align 4
  store i32* %seed, i32** %seed.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* @A, align 4
  %1 = load i32*, i32** %seed.addr, align 8
  %2 = load i32, i32* %index.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %mul = mul nsw i32 %0, %3
  %4 = load i32, i32* @C, align 4
  %add = add nsw i32 %mul, %4
  store i32 %add, i32* %num, align 4
  %5 = load i32, i32* %num, align 4
  %conv = sext i32 %5 to i64
  %6 = load i64, i64* @M, align 8
  %rem = srem i64 %conv, %6
  %conv1 = trunc i64 %rem to i32
  %7 = load i32*, i32** %seed.addr, align 8
  %8 = load i32, i32* %index.addr, align 4
  %idxprom2 = sext i32 %8 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %7, i64 %idxprom2
  store i32 %conv1, i32* %arrayidx3, align 4
  %9 = load i32*, i32** %seed.addr, align 8
  %10 = load i32, i32* %index.addr, align 4
  %idxprom4 = sext i32 %10 to i64
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4
  %11 = load i32, i32* %arrayidx5, align 4
  %conv6 = sitofp i32 %11 to double
  %12 = load i64, i64* @M, align 8
  %conv7 = sitofp i64 %12 to double
  %div = fdiv double %conv6, %conv7
  %13 = call double @llvm.fabs.f64(double %div)
  ret double %13
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @_Z5randnPii(i32* %seed, i32 %index) #0 {
entry:
  %seed.addr = alloca i32*, align 8
  %index.addr = alloca i32, align 4
  %u = alloca double, align 8
  %v = alloca double, align 8
  %cosine = alloca double, align 8
  %rt = alloca double, align 8
  store i32* %seed, i32** %seed.addr, align 8
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32*, i32** %seed.addr, align 8
  %1 = load i32, i32* %index.addr, align 4
  %call = call double @_Z5randuPii(i32* %0, i32 %1)
  store double %call, double* %u, align 8
  %2 = load i32*, i32** %seed.addr, align 8
  %3 = load i32, i32* %index.addr, align 4
  %call1 = call double @_Z5randuPii(i32* %2, i32 %3)
  store double %call1, double* %v, align 8
  %4 = load double, double* %v, align 8
  %mul = fmul contract double 0x401921FB54442D18, %4
  %call2 = call double @cos(double %mul) #10
  store double %call2, double* %cosine, align 8
  %5 = load double, double* %u, align 8
  %call3 = call double @log(double %5) #10
  %mul4 = fmul contract double -2.000000e+00, %call3
  store double %mul4, double* %rt, align 8
  %6 = load double, double* %rt, align 8
  %call5 = call double @sqrt(double %6) #10
  %7 = load double, double* %cosine, align 8
  %mul6 = fmul contract double %call5, %7
  ret double %mul6
}

; Function Attrs: nounwind
declare dso_local double @cos(double) #1

; Function Attrs: nounwind
declare dso_local double @log(double) #1

; Function Attrs: nounwind
declare dso_local double @sqrt(double) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z8addNoisePiS_S_S_S_(i32* %array3D, i32* %dimX, i32* %dimY, i32* %dimZ, i32* %seed) #0 {
entry:
  %array3D.addr = alloca i32*, align 8
  %dimX.addr = alloca i32*, align 8
  %dimY.addr = alloca i32*, align 8
  %dimZ.addr = alloca i32*, align 8
  %seed.addr = alloca i32*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32* %array3D, i32** %array3D.addr, align 8
  store i32* %dimX, i32** %dimX.addr, align 8
  store i32* %dimY, i32** %dimY.addr, align 8
  store i32* %dimZ, i32** %dimZ.addr, align 8
  store i32* %seed, i32** %seed.addr, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %0 = load i32, i32* %x, align 4
  %1 = load i32*, i32** %dimX.addr, align 8
  %2 = load i32, i32* %1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc19, %for.body
  %3 = load i32, i32* %y, align 4
  %4 = load i32*, i32** %dimY.addr, align 8
  %5 = load i32, i32* %4, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end21

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %z, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %6 = load i32, i32* %z, align 4
  %7 = load i32*, i32** %dimZ.addr, align 8
  %8 = load i32, i32* %7, align 4
  %cmp5 = icmp slt i32 %6, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %9 = load i32*, i32** %array3D.addr, align 8
  %10 = load i32, i32* %x, align 4
  %11 = load i32*, i32** %dimY.addr, align 8
  %12 = load i32, i32* %11, align 4
  %mul = mul nsw i32 %10, %12
  %13 = load i32*, i32** %dimZ.addr, align 8
  %14 = load i32, i32* %13, align 4
  %mul7 = mul nsw i32 %mul, %14
  %15 = load i32, i32* %y, align 4
  %16 = load i32*, i32** %dimZ.addr, align 8
  %17 = load i32, i32* %16, align 4
  %mul8 = mul nsw i32 %15, %17
  %add = add nsw i32 %mul7, %mul8
  %18 = load i32, i32* %z, align 4
  %add9 = add nsw i32 %add, %18
  %idxprom = sext i32 %add9 to i64
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom
  %19 = load i32, i32* %arrayidx, align 4
  %20 = load i32*, i32** %seed.addr, align 8
  %call = call double @_Z5randnPii(i32* %20, i32 0)
  %mul10 = fmul contract double 5.000000e+00, %call
  %conv = fptosi double %mul10 to i32
  %add11 = add nsw i32 %19, %conv
  %21 = load i32*, i32** %array3D.addr, align 8
  %22 = load i32, i32* %x, align 4
  %23 = load i32*, i32** %dimY.addr, align 8
  %24 = load i32, i32* %23, align 4
  %mul12 = mul nsw i32 %22, %24
  %25 = load i32*, i32** %dimZ.addr, align 8
  %26 = load i32, i32* %25, align 4
  %mul13 = mul nsw i32 %mul12, %26
  %27 = load i32, i32* %y, align 4
  %28 = load i32*, i32** %dimZ.addr, align 8
  %29 = load i32, i32* %28, align 4
  %mul14 = mul nsw i32 %27, %29
  %add15 = add nsw i32 %mul13, %mul14
  %30 = load i32, i32* %z, align 4
  %add16 = add nsw i32 %add15, %30
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds i32, i32* %21, i64 %idxprom17
  store i32 %add11, i32* %arrayidx18, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %31 = load i32, i32* %z, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %z, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc19

for.inc19:                                        ; preds = %for.end
  %32 = load i32, i32* %y, align 4
  %inc20 = add nsw i32 %32, 1
  store i32 %inc20, i32* %y, align 4
  br label %for.cond1

for.end21:                                        ; preds = %for.cond1
  br label %for.inc22

for.inc22:                                        ; preds = %for.end21
  %33 = load i32, i32* %x, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %x, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z9strelDiskPii(i32* %disk, i32 %radius) #2 {
entry:
  %disk.addr = alloca i32*, align 8
  %radius.addr = alloca i32, align 4
  %diameter = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %distance = alloca double, align 8
  store i32* %disk, i32** %disk.addr, align 8
  store i32 %radius, i32* %radius.addr, align 4
  %0 = load i32, i32* %radius.addr, align 4
  %mul = mul nsw i32 %0, 2
  %sub = sub nsw i32 %mul, 1
  store i32 %sub, i32* %diameter, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %x, align 4
  %2 = load i32, i32* %diameter, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %y, align 4
  %4 = load i32, i32* %diameter, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %x, align 4
  %6 = load i32, i32* %radius.addr, align 4
  %sub4 = sub nsw i32 %5, %6
  %add = add nsw i32 %sub4, 1
  %conv = sitofp i32 %add to double
  %call = call double @_ZSt3powdi(double %conv, i32 2)
  %7 = load i32, i32* %y, align 4
  %8 = load i32, i32* %radius.addr, align 4
  %sub5 = sub nsw i32 %7, %8
  %add6 = add nsw i32 %sub5, 1
  %conv7 = sitofp i32 %add6 to double
  %call8 = call double @_ZSt3powdi(double %conv7, i32 2)
  %add9 = fadd contract double %call, %call8
  %call10 = call double @sqrt(double %add9) #10
  store double %call10, double* %distance, align 8
  %9 = load double, double* %distance, align 8
  %10 = load i32, i32* %radius.addr, align 4
  %conv11 = sitofp i32 %10 to double
  %cmp12 = fcmp olt double %9, %conv11
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %11 = load i32*, i32** %disk.addr, align 8
  %12 = load i32, i32* %x, align 4
  %13 = load i32, i32* %diameter, align 4
  %mul13 = mul nsw i32 %12, %13
  %14 = load i32, i32* %y, align 4
  %add14 = add nsw i32 %mul13, %14
  %idxprom = sext i32 %add14 to i64
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom
  store i32 1, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %y, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %16 = load i32, i32* %x, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %x, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local double @_ZSt3powdi(double %__x, i32 %__i) #0 comdat {
entry:
  %__x.addr = alloca double, align 8
  %__i.addr = alloca i32, align 4
  store double %__x, double* %__x.addr, align 8
  store i32 %__i, i32* %__i.addr, align 4
  %0 = load double, double* %__x.addr, align 8
  %1 = load i32, i32* %__i.addr, align 4
  %2 = call double @llvm.powi.f64(double %0, i32 %1)
  ret double %2
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z13dilate_matrixPiiiiiiii(i32* %matrix, i32 %posX, i32 %posY, i32 %posZ, i32 %dimX, i32 %dimY, i32 %dimZ, i32 %error) #2 {
entry:
  %matrix.addr = alloca i32*, align 8
  %posX.addr = alloca i32, align 4
  %posY.addr = alloca i32, align 4
  %posZ.addr = alloca i32, align 4
  %dimX.addr = alloca i32, align 4
  %dimY.addr = alloca i32, align 4
  %dimZ.addr = alloca i32, align 4
  %error.addr = alloca i32, align 4
  %startX = alloca i32, align 4
  %startY = alloca i32, align 4
  %endX = alloca i32, align 4
  %endY = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %distance = alloca double, align 8
  store i32* %matrix, i32** %matrix.addr, align 8
  store i32 %posX, i32* %posX.addr, align 4
  store i32 %posY, i32* %posY.addr, align 4
  store i32 %posZ, i32* %posZ.addr, align 4
  store i32 %dimX, i32* %dimX.addr, align 4
  store i32 %dimY, i32* %dimY.addr, align 4
  store i32 %dimZ, i32* %dimZ.addr, align 4
  store i32 %error, i32* %error.addr, align 4
  %0 = load i32, i32* %posX.addr, align 4
  %1 = load i32, i32* %error.addr, align 4
  %sub = sub nsw i32 %0, %1
  store i32 %sub, i32* %startX, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %startX, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %startX, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %startX, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %posY.addr, align 4
  %5 = load i32, i32* %error.addr, align 4
  %sub1 = sub nsw i32 %4, %5
  store i32 %sub1, i32* %startY, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body4, %while.end
  %6 = load i32, i32* %startY, align 4
  %cmp3 = icmp slt i32 %6, 0
  br i1 %cmp3, label %while.body4, label %while.end6

while.body4:                                      ; preds = %while.cond2
  %7 = load i32, i32* %startY, align 4
  %inc5 = add nsw i32 %7, 1
  store i32 %inc5, i32* %startY, align 4
  br label %while.cond2

while.end6:                                       ; preds = %while.cond2
  %8 = load i32, i32* %posX.addr, align 4
  %9 = load i32, i32* %error.addr, align 4
  %add = add nsw i32 %8, %9
  store i32 %add, i32* %endX, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body9, %while.end6
  %10 = load i32, i32* %endX, align 4
  %11 = load i32, i32* %dimX.addr, align 4
  %cmp8 = icmp sgt i32 %10, %11
  br i1 %cmp8, label %while.body9, label %while.end10

while.body9:                                      ; preds = %while.cond7
  %12 = load i32, i32* %endX, align 4
  %dec = add nsw i32 %12, -1
  store i32 %dec, i32* %endX, align 4
  br label %while.cond7

while.end10:                                      ; preds = %while.cond7
  %13 = load i32, i32* %posY.addr, align 4
  %14 = load i32, i32* %error.addr, align 4
  %add11 = add nsw i32 %13, %14
  store i32 %add11, i32* %endY, align 4
  br label %while.cond12

while.cond12:                                     ; preds = %while.body14, %while.end10
  %15 = load i32, i32* %endY, align 4
  %16 = load i32, i32* %dimY.addr, align 4
  %cmp13 = icmp sgt i32 %15, %16
  br i1 %cmp13, label %while.body14, label %while.end16

while.body14:                                     ; preds = %while.cond12
  %17 = load i32, i32* %endY, align 4
  %dec15 = add nsw i32 %17, -1
  store i32 %dec15, i32* %endY, align 4
  br label %while.cond12

while.end16:                                      ; preds = %while.cond12
  %18 = load i32, i32* %startX, align 4
  store i32 %18, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc34, %while.end16
  %19 = load i32, i32* %x, align 4
  %20 = load i32, i32* %endX, align 4
  %cmp17 = icmp slt i32 %19, %20
  br i1 %cmp17, label %for.body, label %for.end36

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %startY, align 4
  store i32 %21, i32* %y, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc, %for.body
  %22 = load i32, i32* %y, align 4
  %23 = load i32, i32* %endY, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond18
  %24 = load i32, i32* %x, align 4
  %25 = load i32, i32* %posX.addr, align 4
  %sub21 = sub nsw i32 %24, %25
  %conv = sitofp i32 %sub21 to double
  %call = call double @_ZSt3powdi(double %conv, i32 2)
  %26 = load i32, i32* %y, align 4
  %27 = load i32, i32* %posY.addr, align 4
  %sub22 = sub nsw i32 %26, %27
  %conv23 = sitofp i32 %sub22 to double
  %call24 = call double @_ZSt3powdi(double %conv23, i32 2)
  %add25 = fadd contract double %call, %call24
  %call26 = call double @sqrt(double %add25) #10
  store double %call26, double* %distance, align 8
  %28 = load double, double* %distance, align 8
  %29 = load i32, i32* %error.addr, align 4
  %conv27 = sitofp i32 %29 to double
  %cmp28 = fcmp olt double %28, %conv27
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  %30 = load i32*, i32** %matrix.addr, align 8
  %31 = load i32, i32* %x, align 4
  %32 = load i32, i32* %dimY.addr, align 4
  %mul = mul nsw i32 %31, %32
  %33 = load i32, i32* %dimZ.addr, align 4
  %mul29 = mul nsw i32 %mul, %33
  %34 = load i32, i32* %y, align 4
  %35 = load i32, i32* %dimZ.addr, align 4
  %mul30 = mul nsw i32 %34, %35
  %add31 = add nsw i32 %mul29, %mul30
  %36 = load i32, i32* %posZ.addr, align 4
  %add32 = add nsw i32 %add31, %36
  %idxprom = sext i32 %add32 to i64
  %arrayidx = getelementptr inbounds i32, i32* %30, i64 %idxprom
  store i32 1, i32* %arrayidx, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body20
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %37 = load i32, i32* %y, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %y, align 4
  br label %for.cond18

for.end:                                          ; preds = %for.cond18
  br label %for.inc34

for.inc34:                                        ; preds = %for.end
  %38 = load i32, i32* %x, align 4
  %inc35 = add nsw i32 %38, 1
  store i32 %inc35, i32* %x, align 4
  br label %for.cond

for.end36:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z13imdilate_diskPiiiiiS_(i32* %matrix, i32 %dimX, i32 %dimY, i32 %dimZ, i32 %error, i32* %newMatrix) #2 {
entry:
  %matrix.addr = alloca i32*, align 8
  %dimX.addr = alloca i32, align 4
  %dimY.addr = alloca i32, align 4
  %dimZ.addr = alloca i32, align 4
  %error.addr = alloca i32, align 4
  %newMatrix.addr = alloca i32*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32* %matrix, i32** %matrix.addr, align 8
  store i32 %dimX, i32* %dimX.addr, align 4
  store i32 %dimY, i32* %dimY.addr, align 4
  store i32 %dimZ, i32* %dimZ.addr, align 4
  store i32 %error, i32* %error.addr, align 4
  store i32* %newMatrix, i32** %newMatrix.addr, align 8
  store i32 0, i32* %z, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %z, align 4
  %1 = load i32, i32* %dimZ.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc11, %for.body
  %2 = load i32, i32* %x, align 4
  %3 = load i32, i32* %dimX.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end13

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %y, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %4 = load i32, i32* %y, align 4
  %5 = load i32, i32* %dimY.addr, align 4
  %cmp5 = icmp slt i32 %4, %5
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load i32*, i32** %matrix.addr, align 8
  %7 = load i32, i32* %x, align 4
  %8 = load i32, i32* %dimY.addr, align 4
  %mul = mul nsw i32 %7, %8
  %9 = load i32, i32* %dimZ.addr, align 4
  %mul7 = mul nsw i32 %mul, %9
  %10 = load i32, i32* %y, align 4
  %11 = load i32, i32* %dimZ.addr, align 4
  %mul8 = mul nsw i32 %10, %11
  %add = add nsw i32 %mul7, %mul8
  %12 = load i32, i32* %z, align 4
  %add9 = add nsw i32 %add, %12
  %idxprom = sext i32 %add9 to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  %13 = load i32, i32* %arrayidx, align 4
  %cmp10 = icmp eq i32 %13, 1
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body6
  %14 = load i32*, i32** %newMatrix.addr, align 8
  %15 = load i32, i32* %x, align 4
  %16 = load i32, i32* %y, align 4
  %17 = load i32, i32* %z, align 4
  %18 = load i32, i32* %dimX.addr, align 4
  %19 = load i32, i32* %dimY.addr, align 4
  %20 = load i32, i32* %dimZ.addr, align 4
  %21 = load i32, i32* %error.addr, align 4
  call void @_Z13dilate_matrixPiiiiiiii(i32* %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20, i32 %21)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i32, i32* %y, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %23 = load i32, i32* %x, align 4
  %inc12 = add nsw i32 %23, 1
  store i32 %inc12, i32* %x, align 4
  br label %for.cond1

for.end13:                                        ; preds = %for.cond1
  br label %for.inc14

for.inc14:                                        ; preds = %for.end13
  %24 = load i32, i32* %z, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %z, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_Z12getneighborsPiiPdi(i32* %se, i32 %numOnes, double* %neighbors, i32 %radius) #0 {
entry:
  %se.addr = alloca i32*, align 8
  %numOnes.addr = alloca i32, align 4
  %neighbors.addr = alloca double*, align 8
  %radius.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %neighY = alloca i32, align 4
  %center = alloca i32, align 4
  %diameter = alloca i32, align 4
  store i32* %se, i32** %se.addr, align 8
  store i32 %numOnes, i32* %numOnes.addr, align 4
  store double* %neighbors, double** %neighbors.addr, align 8
  store i32 %radius, i32* %radius.addr, align 4
  store i32 0, i32* %neighY, align 4
  %0 = load i32, i32* %radius.addr, align 4
  %sub = sub nsw i32 %0, 1
  store i32 %sub, i32* %center, align 4
  %1 = load i32, i32* %radius.addr, align 4
  %mul = mul nsw i32 %1, 2
  %sub1 = sub nsw i32 %mul, 1
  store i32 %sub1, i32* %diameter, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %2 = load i32, i32* %x, align 4
  %3 = load i32, i32* %diameter, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %y, align 4
  %5 = load i32, i32* %diameter, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load i32*, i32** %se.addr, align 8
  %7 = load i32, i32* %x, align 4
  %8 = load i32, i32* %diameter, align 4
  %mul5 = mul nsw i32 %7, %8
  %9 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul5, %9
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %11 = load i32, i32* %y, align 4
  %12 = load i32, i32* %center, align 4
  %sub6 = sub nsw i32 %11, %12
  %conv = sitofp i32 %sub6 to double
  %13 = load double*, double** %neighbors.addr, align 8
  %14 = load i32, i32* %neighY, align 4
  %mul7 = mul nsw i32 %14, 2
  %idxprom8 = sext i32 %mul7 to i64
  %arrayidx9 = getelementptr inbounds double, double* %13, i64 %idxprom8
  store double %conv, double* %arrayidx9, align 8
  %15 = load i32, i32* %x, align 4
  %16 = load i32, i32* %center, align 4
  %sub10 = sub nsw i32 %15, %16
  %conv11 = sitofp i32 %sub10 to double
  %17 = load double*, double** %neighbors.addr, align 8
  %18 = load i32, i32* %neighY, align 4
  %mul12 = mul nsw i32 %18, 2
  %add13 = add nsw i32 %mul12, 1
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds double, double* %17, i64 %idxprom14
  store double %conv11, double* %arrayidx15, align 8
  %19 = load i32, i32* %neighY, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %neighY, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %y, align 4
  %inc16 = add nsw i32 %20, 1
  store i32 %inc16, i32* %y, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc17

for.inc17:                                        ; preds = %for.end
  %21 = load i32, i32* %x, align 4
  %inc18 = add nsw i32 %21, 1
  store i32 %inc18, i32* %x, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z13videoSequencePiiiiS_(i32* %I, i32 %IszX, i32 %IszY, i32 %Nfr, i32* %seed) #2 {
entry:
  %I.addr = alloca i32*, align 8
  %IszX.addr = alloca i32, align 4
  %IszY.addr = alloca i32, align 4
  %Nfr.addr = alloca i32, align 4
  %seed.addr = alloca i32*, align 8
  %k = alloca i32, align 4
  %max_size = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %xk = alloca i32, align 4
  %yk = alloca i32, align 4
  %pos = alloca i32, align 4
  %newMatrix = alloca i32*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i32* %I, i32** %I.addr, align 8
  store i32 %IszX, i32* %IszX.addr, align 4
  store i32 %IszY, i32* %IszY.addr, align 4
  store i32 %Nfr, i32* %Nfr.addr, align 4
  store i32* %seed, i32** %seed.addr, align 8
  %0 = load i32, i32* %IszX.addr, align 4
  %1 = load i32, i32* %IszY.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %Nfr.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  store i32 %mul1, i32* %max_size, align 4
  %3 = load i32, i32* %IszY.addr, align 4
  %conv = sitofp i32 %3 to double
  %div = fdiv double %conv, 2.000000e+00
  %call = call double @_Z11roundDoubled(double %div)
  %conv2 = fptosi double %call to i32
  store i32 %conv2, i32* %x0, align 4
  %4 = load i32, i32* %IszX.addr, align 4
  %conv3 = sitofp i32 %4 to double
  %div4 = fdiv double %conv3, 2.000000e+00
  %call5 = call double @_Z11roundDoubled(double %div4)
  %conv6 = fptosi double %call5 to i32
  store i32 %conv6, i32* %y0, align 4
  %5 = load i32*, i32** %I.addr, align 8
  %6 = load i32, i32* %x0, align 4
  %7 = load i32, i32* %IszY.addr, align 4
  %mul7 = mul nsw i32 %6, %7
  %8 = load i32, i32* %Nfr.addr, align 4
  %mul8 = mul nsw i32 %mul7, %8
  %9 = load i32, i32* %y0, align 4
  %10 = load i32, i32* %Nfr.addr, align 4
  %mul9 = mul nsw i32 %9, %10
  %add = add nsw i32 %mul8, %mul9
  %add10 = add nsw i32 %add, 0
  %idxprom = sext i32 %add10 to i64
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom
  store i32 1, i32* %arrayidx, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %k, align 4
  %12 = load i32, i32* %Nfr.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %x0, align 4
  %14 = load i32, i32* %k, align 4
  %sub = sub nsw i32 %14, 1
  %add11 = add nsw i32 %13, %sub
  %call12 = call i32 @abs(i32 %add11) #12
  store i32 %call12, i32* %xk, align 4
  %15 = load i32, i32* %y0, align 4
  %16 = load i32, i32* %k, align 4
  %sub13 = sub nsw i32 %16, 1
  %mul14 = mul nsw i32 2, %sub13
  %sub15 = sub nsw i32 %15, %mul14
  %call16 = call i32 @abs(i32 %sub15) #12
  store i32 %call16, i32* %yk, align 4
  %17 = load i32, i32* %yk, align 4
  %18 = load i32, i32* %IszY.addr, align 4
  %mul17 = mul nsw i32 %17, %18
  %19 = load i32, i32* %Nfr.addr, align 4
  %mul18 = mul nsw i32 %mul17, %19
  %20 = load i32, i32* %xk, align 4
  %21 = load i32, i32* %Nfr.addr, align 4
  %mul19 = mul nsw i32 %20, %21
  %add20 = add nsw i32 %mul18, %mul19
  %22 = load i32, i32* %k, align 4
  %add21 = add nsw i32 %add20, %22
  store i32 %add21, i32* %pos, align 4
  %23 = load i32, i32* %pos, align 4
  %24 = load i32, i32* %max_size, align 4
  %cmp22 = icmp sge i32 %23, %24
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %pos, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %25 = load i32*, i32** %I.addr, align 8
  %26 = load i32, i32* %pos, align 4
  %idxprom23 = sext i32 %26 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %25, i64 %idxprom23
  store i32 1, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load i32, i32* %k, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %IszX.addr, align 4
  %conv25 = sext i32 %28 to i64
  %mul26 = mul i64 4, %conv25
  %29 = load i32, i32* %IszY.addr, align 4
  %conv27 = sext i32 %29 to i64
  %mul28 = mul i64 %mul26, %conv27
  %30 = load i32, i32* %Nfr.addr, align 4
  %conv29 = sext i32 %30 to i64
  %mul30 = mul i64 %mul28, %conv29
  %call31 = call noalias i8* @malloc(i64 %mul30) #10
  %31 = bitcast i8* %call31 to i32*
  store i32* %31, i32** %newMatrix, align 8
  %32 = load i32*, i32** %I.addr, align 8
  %33 = load i32, i32* %IszX.addr, align 4
  %34 = load i32, i32* %IszY.addr, align 4
  %35 = load i32, i32* %Nfr.addr, align 4
  %36 = load i32*, i32** %newMatrix, align 8
  call void @_Z13imdilate_diskPiiiiiS_(i32* %32, i32 %33, i32 %34, i32 %35, i32 5, i32* %36)
  store i32 0, i32* %x, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc61, %for.end
  %37 = load i32, i32* %x, align 4
  %38 = load i32, i32* %IszX.addr, align 4
  %cmp33 = icmp slt i32 %37, %38
  br i1 %cmp33, label %for.body34, label %for.end63

for.body34:                                       ; preds = %for.cond32
  store i32 0, i32* %y, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc58, %for.body34
  %39 = load i32, i32* %y, align 4
  %40 = load i32, i32* %IszY.addr, align 4
  %cmp36 = icmp slt i32 %39, %40
  br i1 %cmp36, label %for.body37, label %for.end60

for.body37:                                       ; preds = %for.cond35
  store i32 0, i32* %k, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc55, %for.body37
  %41 = load i32, i32* %k, align 4
  %42 = load i32, i32* %Nfr.addr, align 4
  %cmp39 = icmp slt i32 %41, %42
  br i1 %cmp39, label %for.body40, label %for.end57

for.body40:                                       ; preds = %for.cond38
  %43 = load i32*, i32** %newMatrix, align 8
  %44 = load i32, i32* %x, align 4
  %45 = load i32, i32* %IszY.addr, align 4
  %mul41 = mul nsw i32 %44, %45
  %46 = load i32, i32* %Nfr.addr, align 4
  %mul42 = mul nsw i32 %mul41, %46
  %47 = load i32, i32* %y, align 4
  %48 = load i32, i32* %Nfr.addr, align 4
  %mul43 = mul nsw i32 %47, %48
  %add44 = add nsw i32 %mul42, %mul43
  %49 = load i32, i32* %k, align 4
  %add45 = add nsw i32 %add44, %49
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds i32, i32* %43, i64 %idxprom46
  %50 = load i32, i32* %arrayidx47, align 4
  %51 = load i32*, i32** %I.addr, align 8
  %52 = load i32, i32* %x, align 4
  %53 = load i32, i32* %IszY.addr, align 4
  %mul48 = mul nsw i32 %52, %53
  %54 = load i32, i32* %Nfr.addr, align 4
  %mul49 = mul nsw i32 %mul48, %54
  %55 = load i32, i32* %y, align 4
  %56 = load i32, i32* %Nfr.addr, align 4
  %mul50 = mul nsw i32 %55, %56
  %add51 = add nsw i32 %mul49, %mul50
  %57 = load i32, i32* %k, align 4
  %add52 = add nsw i32 %add51, %57
  %idxprom53 = sext i32 %add52 to i64
  %arrayidx54 = getelementptr inbounds i32, i32* %51, i64 %idxprom53
  store i32 %50, i32* %arrayidx54, align 4
  br label %for.inc55

for.inc55:                                        ; preds = %for.body40
  %58 = load i32, i32* %k, align 4
  %inc56 = add nsw i32 %58, 1
  store i32 %inc56, i32* %k, align 4
  br label %for.cond38

for.end57:                                        ; preds = %for.cond38
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %59 = load i32, i32* %y, align 4
  %inc59 = add nsw i32 %59, 1
  store i32 %inc59, i32* %y, align 4
  br label %for.cond35

for.end60:                                        ; preds = %for.cond35
  br label %for.inc61

for.inc61:                                        ; preds = %for.end60
  %60 = load i32, i32* %x, align 4
  %inc62 = add nsw i32 %60, 1
  store i32 %inc62, i32* %x, align 4
  br label %for.cond32

for.end63:                                        ; preds = %for.cond32
  %61 = load i32*, i32** %newMatrix, align 8
  %62 = bitcast i32* %61 to i8*
  call void @free(i8* %62) #10
  %63 = load i32*, i32** %I.addr, align 8
  call void @_Z5setIfiiPiS_S_S_(i32 0, i32 100, i32* %63, i32* %IszX.addr, i32* %IszY.addr, i32* %Nfr.addr)
  %64 = load i32*, i32** %I.addr, align 8
  call void @_Z5setIfiiPiS_S_S_(i32 1, i32 228, i32* %64, i32* %IszX.addr, i32* %IszY.addr, i32* %Nfr.addr)
  %65 = load i32*, i32** %I.addr, align 8
  %66 = load i32*, i32** %seed.addr, align 8
  call void @_Z8addNoisePiS_S_S_S_(i32* %65, i32* %IszX.addr, i32* %IszY.addr, i32* %Nfr.addr, i32* %66)
  ret void
}

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #7

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

; Function Attrs: noinline optnone uwtable
define dso_local double @_Z17calcLikelihoodSumPiS_i(i32* %I, i32* %ind, i32 %numOnes) #2 {
entry:
  %I.addr = alloca i32*, align 8
  %ind.addr = alloca i32*, align 8
  %numOnes.addr = alloca i32, align 4
  %likelihoodSum = alloca double, align 8
  %y = alloca i32, align 4
  store i32* %I, i32** %I.addr, align 8
  store i32* %ind, i32** %ind.addr, align 8
  store i32 %numOnes, i32* %numOnes.addr, align 4
  store double 0.000000e+00, double* %likelihoodSum, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %y, align 4
  %1 = load i32, i32* %numOnes.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %I.addr, align 8
  %3 = load i32*, i32** %ind.addr, align 8
  %4 = load i32, i32* %y, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds i32, i32* %2, i64 %idxprom1
  %6 = load i32, i32* %arrayidx2, align 4
  %sub = sub nsw i32 %6, 100
  %conv = sitofp i32 %sub to double
  %call = call double @_ZSt3powdi(double %conv, i32 2)
  %7 = load i32*, i32** %I.addr, align 8
  %8 = load i32*, i32** %ind.addr, align 8
  %9 = load i32, i32* %y, align 4
  %idxprom3 = sext i32 %9 to i64
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i64 %idxprom3
  %10 = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %10 to i64
  %arrayidx6 = getelementptr inbounds i32, i32* %7, i64 %idxprom5
  %11 = load i32, i32* %arrayidx6, align 4
  %sub7 = sub nsw i32 %11, 228
  %conv8 = sitofp i32 %sub7 to double
  %call9 = call double @_ZSt3powdi(double %conv8, i32 2)
  %sub10 = fsub contract double %call, %call9
  %div = fdiv double %sub10, 5.000000e+01
  %12 = load double, double* %likelihoodSum, align 8
  %add = fadd contract double %12, %div
  store double %add, double* %likelihoodSum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %y, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load double, double* %likelihoodSum, align 8
  ret double %14
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_Z9findIndexPdid(double* %CDF, i32 %lengthCDF, double %value) #0 {
entry:
  %retval = alloca i32, align 4
  %CDF.addr = alloca double*, align 8
  %lengthCDF.addr = alloca i32, align 4
  %value.addr = alloca double, align 8
  %index = alloca i32, align 4
  %x = alloca i32, align 4
  store double* %CDF, double** %CDF.addr, align 8
  store i32 %lengthCDF, i32* %lengthCDF.addr, align 4
  store double %value, double* %value.addr, align 8
  store i32 -1, i32* %index, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %lengthCDF.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %CDF.addr, align 8
  %3 = load i32, i32* %x, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %value.addr, align 8
  %cmp1 = fcmp oge double %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %x, align 4
  store i32 %6, i32* %index, align 4
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %x, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load i32, i32* %index, align 4
  %cmp2 = icmp eq i32 %8, -1
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.end
  %9 = load i32, i32* %lengthCDF.addr, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %for.end
  %10 = load i32, i32* %index, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then3
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline optnone uwtable
define dso_local void @_Z14particleFilterPiiiiS_i(i32* %I, i32 %IszX, i32 %IszY, i32 %Nfr, i32* %seed, i32 %Nparticles) #2 {
entry:
  %I.addr = alloca i32*, align 8
  %IszX.addr = alloca i32, align 4
  %IszY.addr = alloca i32, align 4
  %Nfr.addr = alloca i32, align 4
  %seed.addr = alloca i32*, align 8
  %Nparticles.addr = alloca i32, align 4
  %max_size = alloca i32, align 4
  %start = alloca i64, align 8
  %xe = alloca double, align 8
  %ye = alloca double, align 8
  %radius = alloca i32, align 4
  %diameter = alloca i32, align 4
  %disk = alloca i32*, align 8
  %countOnes = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %objxy = alloca double*, align 8
  %get_neighbors = alloca i64, align 8
  %weights = alloca double*, align 8
  %get_weights = alloca i64, align 8
  %likelihood = alloca double*, align 8
  %arrayX = alloca double*, align 8
  %arrayY = alloca double*, align 8
  %xj = alloca double*, align 8
  %yj = alloca double*, align 8
  %CDF = alloca double*, align 8
  %arrayX_GPU = alloca double*, align 8
  %arrayY_GPU = alloca double*, align 8
  %xj_GPU = alloca double*, align 8
  %yj_GPU = alloca double*, align 8
  %CDF_GPU = alloca double*, align 8
  %ind = alloca i32*, align 8
  %u = alloca double*, align 8
  %u_GPU = alloca double*, align 8
  %k = alloca i32, align 4
  %indX = alloca i32, align 4
  %indY = alloca i32, align 4
  %set_arrays = alloca i64, align 8
  %error = alloca i64, align 8
  %likelihood_time = alloca i64, align 8
  %exponential = alloca i64, align 8
  %sumWeights = alloca double, align 8
  %sum_time = alloca i64, align 8
  %normalize = alloca i64, align 8
  %move_time = alloca i64, align 8
  %distance = alloca double, align 8
  %cum_sum = alloca i64, align 8
  %u1 = alloca double, align 8
  %u_time = alloca i64, align 8
  %start_copy = alloca i64, align 8
  %end_copy = alloca i64, align 8
  %num_blocks = alloca i32, align 4
  %agg.tmp = alloca %struct.dim3, align 4
  %agg.tmp335 = alloca %struct.dim3, align 4
  %agg.tmp.coerce = alloca { i64, i32 }, align 4
  %agg.tmp335.coerce = alloca { i64, i32 }, align 4
  %start_copy_back = alloca i64, align 8
  %end_copy_back = alloca i64, align 8
  %xyj_time = alloca i64, align 8
  %reset = alloca i64, align 8
  %i = alloca i32, align 4
  store i32* %I, i32** %I.addr, align 8
  store i32 %IszX, i32* %IszX.addr, align 4
  store i32 %IszY, i32* %IszY.addr, align 4
  store i32 %Nfr, i32* %Nfr.addr, align 4
  store i32* %seed, i32** %seed.addr, align 8
  store i32 %Nparticles, i32* %Nparticles.addr, align 4
  %0 = load i32, i32* %IszX.addr, align 4
  %1 = load i32, i32* %IszY.addr, align 4
  %mul = mul nsw i32 %0, %1
  %2 = load i32, i32* %Nfr.addr, align 4
  %mul1 = mul nsw i32 %mul, %2
  store i32 %mul1, i32* %max_size, align 4
  %call = call i64 @_Z8get_timev()
  store i64 %call, i64* %start, align 8
  %3 = load i32, i32* %IszY.addr, align 4
  %conv = sitofp i32 %3 to double
  %div = fdiv double %conv, 2.000000e+00
  %call2 = call double @_Z11roundDoubled(double %div)
  store double %call2, double* %xe, align 8
  %4 = load i32, i32* %IszX.addr, align 4
  %conv3 = sitofp i32 %4 to double
  %div4 = fdiv double %conv3, 2.000000e+00
  %call5 = call double @_Z11roundDoubled(double %div4)
  store double %call5, double* %ye, align 8
  store i32 5, i32* %radius, align 4
  %5 = load i32, i32* %radius, align 4
  %mul6 = mul nsw i32 %5, 2
  %sub = sub nsw i32 %mul6, 1
  store i32 %sub, i32* %diameter, align 4
  %6 = load i32, i32* %diameter, align 4
  %7 = load i32, i32* %diameter, align 4
  %mul7 = mul nsw i32 %6, %7
  %conv8 = sext i32 %mul7 to i64
  %mul9 = mul i64 %conv8, 4
  %call10 = call noalias i8* @malloc(i64 %mul9) #10
  %8 = bitcast i8* %call10 to i32*
  store i32* %8, i32** %disk, align 8
  %9 = load i32*, i32** %disk, align 8
  %10 = load i32, i32* %radius, align 4
  call void @_Z9strelDiskPii(i32* %9, i32 %10)
  store i32 0, i32* %countOnes, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %diameter, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc, %for.body
  %13 = load i32, i32* %y, align 4
  %14 = load i32, i32* %diameter, align 4
  %cmp12 = icmp slt i32 %13, %14
  br i1 %cmp12, label %for.body13, label %for.end

for.body13:                                       ; preds = %for.cond11
  %15 = load i32*, i32** %disk, align 8
  %16 = load i32, i32* %x, align 4
  %17 = load i32, i32* %diameter, align 4
  %mul14 = mul nsw i32 %16, %17
  %18 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul14, %18
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds i32, i32* %15, i64 %idxprom
  %19 = load i32, i32* %arrayidx, align 4
  %cmp15 = icmp eq i32 %19, 1
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body13
  %20 = load i32, i32* %countOnes, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %countOnes, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body13
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %y, align 4
  br label %for.cond11

for.end:                                          ; preds = %for.cond11
  br label %for.inc17

for.inc17:                                        ; preds = %for.end
  %22 = load i32, i32* %x, align 4
  %inc18 = add nsw i32 %22, 1
  store i32 %inc18, i32* %x, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  %23 = load i32, i32* %countOnes, align 4
  %mul20 = mul nsw i32 %23, 2
  %conv21 = sext i32 %mul20 to i64
  %mul22 = mul i64 %conv21, 8
  %call23 = call noalias i8* @malloc(i64 %mul22) #10
  %24 = bitcast i8* %call23 to double*
  store double* %24, double** %objxy, align 8
  %25 = load i32*, i32** %disk, align 8
  %26 = load i32, i32* %countOnes, align 4
  %27 = load double*, double** %objxy, align 8
  %28 = load i32, i32* %radius, align 4
  call void @_Z12getneighborsPiiPdi(i32* %25, i32 %26, double* %27, i32 %28)
  %call24 = call i64 @_Z8get_timev()
  store i64 %call24, i64* %get_neighbors, align 8
  %29 = load i64, i64* %start, align 8
  %30 = load i64, i64* %get_neighbors, align 8
  %call25 = call float @_Z12elapsed_timexx(i64 %29, i64 %30)
  %conv26 = fpext float %call25 to double
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), double %conv26)
  %31 = load i32, i32* %Nparticles.addr, align 4
  %conv28 = sext i32 %31 to i64
  %mul29 = mul i64 8, %conv28
  %call30 = call noalias i8* @malloc(i64 %mul29) #10
  %32 = bitcast i8* %call30 to double*
  store double* %32, double** %weights, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc38, %for.end19
  %33 = load i32, i32* %x, align 4
  %34 = load i32, i32* %Nparticles.addr, align 4
  %cmp32 = icmp slt i32 %33, %34
  br i1 %cmp32, label %for.body33, label %for.end40

for.body33:                                       ; preds = %for.cond31
  %35 = load i32, i32* %Nparticles.addr, align 4
  %conv34 = sitofp i32 %35 to double
  %div35 = fdiv double 1.000000e+00, %conv34
  %36 = load double*, double** %weights, align 8
  %37 = load i32, i32* %x, align 4
  %idxprom36 = sext i32 %37 to i64
  %arrayidx37 = getelementptr inbounds double, double* %36, i64 %idxprom36
  store double %div35, double* %arrayidx37, align 8
  br label %for.inc38

for.inc38:                                        ; preds = %for.body33
  %38 = load i32, i32* %x, align 4
  %inc39 = add nsw i32 %38, 1
  store i32 %inc39, i32* %x, align 4
  br label %for.cond31

for.end40:                                        ; preds = %for.cond31
  %call41 = call i64 @_Z8get_timev()
  store i64 %call41, i64* %get_weights, align 8
  %39 = load i64, i64* %get_neighbors, align 8
  %40 = load i64, i64* %get_weights, align 8
  %call42 = call float @_Z12elapsed_timexx(i64 %39, i64 %40)
  %conv43 = fpext float %call42 to double
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), double %conv43)
  %41 = load i32, i32* %Nparticles.addr, align 4
  %conv45 = sext i32 %41 to i64
  %mul46 = mul i64 8, %conv45
  %call47 = call noalias i8* @malloc(i64 %mul46) #10
  %42 = bitcast i8* %call47 to double*
  store double* %42, double** %likelihood, align 8
  %43 = load i32, i32* %Nparticles.addr, align 4
  %conv48 = sext i32 %43 to i64
  %mul49 = mul i64 8, %conv48
  %call50 = call noalias i8* @malloc(i64 %mul49) #10
  %44 = bitcast i8* %call50 to double*
  store double* %44, double** %arrayX, align 8
  %45 = load i32, i32* %Nparticles.addr, align 4
  %conv51 = sext i32 %45 to i64
  %mul52 = mul i64 8, %conv51
  %call53 = call noalias i8* @malloc(i64 %mul52) #10
  %46 = bitcast i8* %call53 to double*
  store double* %46, double** %arrayY, align 8
  %47 = load i32, i32* %Nparticles.addr, align 4
  %conv54 = sext i32 %47 to i64
  %mul55 = mul i64 8, %conv54
  %call56 = call noalias i8* @malloc(i64 %mul55) #10
  %48 = bitcast i8* %call56 to double*
  store double* %48, double** %xj, align 8
  %49 = load i32, i32* %Nparticles.addr, align 4
  %conv57 = sext i32 %49 to i64
  %mul58 = mul i64 8, %conv57
  %call59 = call noalias i8* @malloc(i64 %mul58) #10
  %50 = bitcast i8* %call59 to double*
  store double* %50, double** %yj, align 8
  %51 = load i32, i32* %Nparticles.addr, align 4
  %conv60 = sext i32 %51 to i64
  %mul61 = mul i64 8, %conv60
  %call62 = call noalias i8* @malloc(i64 %mul61) #10
  %52 = bitcast i8* %call62 to double*
  store double* %52, double** %CDF, align 8
  %53 = load i32, i32* %countOnes, align 4
  %conv63 = sext i32 %53 to i64
  %mul64 = mul i64 4, %conv63
  %call65 = call noalias i8* @malloc(i64 %mul64) #10
  %54 = bitcast i8* %call65 to i32*
  store i32* %54, i32** %ind, align 8
  %55 = load i32, i32* %Nparticles.addr, align 4
  %conv66 = sext i32 %55 to i64
  %mul67 = mul i64 8, %conv66
  %call68 = call noalias i8* @malloc(i64 %mul67) #10
  %56 = bitcast i8* %call68 to double*
  store double* %56, double** %u, align 8
  %57 = bitcast double** %arrayX_GPU to i8**
  %58 = load i32, i32* %Nparticles.addr, align 4
  %conv69 = sext i32 %58 to i64
  %mul70 = mul i64 8, %conv69
  %call71 = call i32 @cudaMalloc(i8** %57, i64 %mul70)
  call void @_Z11check_error9cudaError(i32 %call71)
  %59 = bitcast double** %arrayY_GPU to i8**
  %60 = load i32, i32* %Nparticles.addr, align 4
  %conv72 = sext i32 %60 to i64
  %mul73 = mul i64 8, %conv72
  %call74 = call i32 @cudaMalloc(i8** %59, i64 %mul73)
  call void @_Z11check_error9cudaError(i32 %call74)
  %61 = bitcast double** %xj_GPU to i8**
  %62 = load i32, i32* %Nparticles.addr, align 4
  %conv75 = sext i32 %62 to i64
  %mul76 = mul i64 8, %conv75
  %call77 = call i32 @cudaMalloc(i8** %61, i64 %mul76)
  call void @_Z11check_error9cudaError(i32 %call77)
  %63 = bitcast double** %yj_GPU to i8**
  %64 = load i32, i32* %Nparticles.addr, align 4
  %conv78 = sext i32 %64 to i64
  %mul79 = mul i64 8, %conv78
  %call80 = call i32 @cudaMalloc(i8** %63, i64 %mul79)
  call void @_Z11check_error9cudaError(i32 %call80)
  %65 = bitcast double** %CDF_GPU to i8**
  %66 = load i32, i32* %Nparticles.addr, align 4
  %conv81 = sext i32 %66 to i64
  %mul82 = mul i64 8, %conv81
  %call83 = call i32 @cudaMalloc(i8** %65, i64 %mul82)
  call void @_Z11check_error9cudaError(i32 %call83)
  %67 = bitcast double** %u_GPU to i8**
  %68 = load i32, i32* %Nparticles.addr, align 4
  %conv84 = sext i32 %68 to i64
  %mul85 = mul i64 8, %conv84
  %call86 = call i32 @cudaMalloc(i8** %67, i64 %mul85)
  call void @_Z11check_error9cudaError(i32 %call86)
  store i32 0, i32* %x, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc94, %for.end40
  %69 = load i32, i32* %x, align 4
  %70 = load i32, i32* %Nparticles.addr, align 4
  %cmp88 = icmp slt i32 %69, %70
  br i1 %cmp88, label %for.body89, label %for.end96

for.body89:                                       ; preds = %for.cond87
  %71 = load double, double* %xe, align 8
  %72 = load double*, double** %arrayX, align 8
  %73 = load i32, i32* %x, align 4
  %idxprom90 = sext i32 %73 to i64
  %arrayidx91 = getelementptr inbounds double, double* %72, i64 %idxprom90
  store double %71, double* %arrayidx91, align 8
  %74 = load double, double* %ye, align 8
  %75 = load double*, double** %arrayY, align 8
  %76 = load i32, i32* %x, align 4
  %idxprom92 = sext i32 %76 to i64
  %arrayidx93 = getelementptr inbounds double, double* %75, i64 %idxprom92
  store double %74, double* %arrayidx93, align 8
  br label %for.inc94

for.inc94:                                        ; preds = %for.body89
  %77 = load i32, i32* %x, align 4
  %inc95 = add nsw i32 %77, 1
  store i32 %inc95, i32* %x, align 4
  br label %for.cond87

for.end96:                                        ; preds = %for.cond87
  store i32 1, i32* %k, align 4
  br label %for.cond97

for.cond97:                                       ; preds = %for.inc381, %for.end96
  %78 = load i32, i32* %k, align 4
  %79 = load i32, i32* %Nfr.addr, align 4
  %cmp98 = icmp slt i32 %78, %79
  br i1 %cmp98, label %for.body99, label %for.end383

for.body99:                                       ; preds = %for.cond97
  %call100 = call i64 @_Z8get_timev()
  store i64 %call100, i64* %set_arrays, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond101

for.cond101:                                      ; preds = %for.inc120, %for.body99
  %80 = load i32, i32* %x, align 4
  %81 = load i32, i32* %Nparticles.addr, align 4
  %cmp102 = icmp slt i32 %80, %81
  br i1 %cmp102, label %for.body103, label %for.end122

for.body103:                                      ; preds = %for.cond101
  %82 = load double*, double** %arrayX, align 8
  %83 = load i32, i32* %x, align 4
  %idxprom104 = sext i32 %83 to i64
  %arrayidx105 = getelementptr inbounds double, double* %82, i64 %idxprom104
  %84 = load double, double* %arrayidx105, align 8
  %add106 = fadd contract double %84, 1.000000e+00
  %85 = load i32*, i32** %seed.addr, align 8
  %86 = load i32, i32* %x, align 4
  %call107 = call double @_Z5randnPii(i32* %85, i32 %86)
  %mul108 = fmul contract double 5.000000e+00, %call107
  %add109 = fadd contract double %add106, %mul108
  %87 = load double*, double** %arrayX, align 8
  %88 = load i32, i32* %x, align 4
  %idxprom110 = sext i32 %88 to i64
  %arrayidx111 = getelementptr inbounds double, double* %87, i64 %idxprom110
  store double %add109, double* %arrayidx111, align 8
  %89 = load double*, double** %arrayY, align 8
  %90 = load i32, i32* %x, align 4
  %idxprom112 = sext i32 %90 to i64
  %arrayidx113 = getelementptr inbounds double, double* %89, i64 %idxprom112
  %91 = load double, double* %arrayidx113, align 8
  %sub114 = fsub contract double %91, 2.000000e+00
  %92 = load i32*, i32** %seed.addr, align 8
  %93 = load i32, i32* %x, align 4
  %call115 = call double @_Z5randnPii(i32* %92, i32 %93)
  %mul116 = fmul contract double 2.000000e+00, %call115
  %add117 = fadd contract double %sub114, %mul116
  %94 = load double*, double** %arrayY, align 8
  %95 = load i32, i32* %x, align 4
  %idxprom118 = sext i32 %95 to i64
  %arrayidx119 = getelementptr inbounds double, double* %94, i64 %idxprom118
  store double %add117, double* %arrayidx119, align 8
  br label %for.inc120

for.inc120:                                       ; preds = %for.body103
  %96 = load i32, i32* %x, align 4
  %inc121 = add nsw i32 %96, 1
  store i32 %inc121, i32* %x, align 4
  br label %for.cond101

for.end122:                                       ; preds = %for.cond101
  %call123 = call i64 @_Z8get_timev()
  store i64 %call123, i64* %error, align 8
  %97 = load i64, i64* %set_arrays, align 8
  %98 = load i64, i64* %error, align 8
  %call124 = call float @_Z12elapsed_timexx(i64 %97, i64 %98)
  %conv125 = fpext float %call124 to double
  %call126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), double %conv125)
  store i32 0, i32* %x, align 4
  br label %for.cond127

for.cond127:                                      ; preds = %for.inc178, %for.end122
  %99 = load i32, i32* %x, align 4
  %100 = load i32, i32* %Nparticles.addr, align 4
  %cmp128 = icmp slt i32 %99, %100
  br i1 %cmp128, label %for.body129, label %for.end180

for.body129:                                      ; preds = %for.cond127
  store i32 0, i32* %y, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc166, %for.body129
  %101 = load i32, i32* %y, align 4
  %102 = load i32, i32* %countOnes, align 4
  %cmp131 = icmp slt i32 %101, %102
  br i1 %cmp131, label %for.body132, label %for.end168

for.body132:                                      ; preds = %for.cond130
  %103 = load double*, double** %arrayX, align 8
  %104 = load i32, i32* %x, align 4
  %idxprom133 = sext i32 %104 to i64
  %arrayidx134 = getelementptr inbounds double, double* %103, i64 %idxprom133
  %105 = load double, double* %arrayidx134, align 8
  %call135 = call double @_Z11roundDoubled(double %105)
  %106 = load double*, double** %objxy, align 8
  %107 = load i32, i32* %y, align 4
  %mul136 = mul nsw i32 %107, 2
  %add137 = add nsw i32 %mul136, 1
  %idxprom138 = sext i32 %add137 to i64
  %arrayidx139 = getelementptr inbounds double, double* %106, i64 %idxprom138
  %108 = load double, double* %arrayidx139, align 8
  %add140 = fadd contract double %call135, %108
  %conv141 = fptosi double %add140 to i32
  store i32 %conv141, i32* %indX, align 4
  %109 = load double*, double** %arrayY, align 8
  %110 = load i32, i32* %x, align 4
  %idxprom142 = sext i32 %110 to i64
  %arrayidx143 = getelementptr inbounds double, double* %109, i64 %idxprom142
  %111 = load double, double* %arrayidx143, align 8
  %call144 = call double @_Z11roundDoubled(double %111)
  %112 = load double*, double** %objxy, align 8
  %113 = load i32, i32* %y, align 4
  %mul145 = mul nsw i32 %113, 2
  %idxprom146 = sext i32 %mul145 to i64
  %arrayidx147 = getelementptr inbounds double, double* %112, i64 %idxprom146
  %114 = load double, double* %arrayidx147, align 8
  %add148 = fadd contract double %call144, %114
  %conv149 = fptosi double %add148 to i32
  store i32 %conv149, i32* %indY, align 4
  %115 = load i32, i32* %indX, align 4
  %116 = load i32, i32* %IszY.addr, align 4
  %mul150 = mul nsw i32 %115, %116
  %117 = load i32, i32* %Nfr.addr, align 4
  %mul151 = mul nsw i32 %mul150, %117
  %118 = load i32, i32* %indY, align 4
  %119 = load i32, i32* %Nfr.addr, align 4
  %mul152 = mul nsw i32 %118, %119
  %add153 = add nsw i32 %mul151, %mul152
  %120 = load i32, i32* %k, align 4
  %add154 = add nsw i32 %add153, %120
  %call155 = call double @_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %add154)
  %conv156 = fptosi double %call155 to i32
  %121 = load i32*, i32** %ind, align 8
  %122 = load i32, i32* %y, align 4
  %idxprom157 = sext i32 %122 to i64
  %arrayidx158 = getelementptr inbounds i32, i32* %121, i64 %idxprom157
  store i32 %conv156, i32* %arrayidx158, align 4
  %123 = load i32*, i32** %ind, align 8
  %124 = load i32, i32* %y, align 4
  %idxprom159 = sext i32 %124 to i64
  %arrayidx160 = getelementptr inbounds i32, i32* %123, i64 %idxprom159
  %125 = load i32, i32* %arrayidx160, align 4
  %126 = load i32, i32* %max_size, align 4
  %cmp161 = icmp sge i32 %125, %126
  br i1 %cmp161, label %if.then162, label %if.end165

if.then162:                                       ; preds = %for.body132
  %127 = load i32*, i32** %ind, align 8
  %128 = load i32, i32* %y, align 4
  %idxprom163 = sext i32 %128 to i64
  %arrayidx164 = getelementptr inbounds i32, i32* %127, i64 %idxprom163
  store i32 0, i32* %arrayidx164, align 4
  br label %if.end165

if.end165:                                        ; preds = %if.then162, %for.body132
  br label %for.inc166

for.inc166:                                       ; preds = %if.end165
  %129 = load i32, i32* %y, align 4
  %inc167 = add nsw i32 %129, 1
  store i32 %inc167, i32* %y, align 4
  br label %for.cond130

for.end168:                                       ; preds = %for.cond130
  %130 = load i32*, i32** %I.addr, align 8
  %131 = load i32*, i32** %ind, align 8
  %132 = load i32, i32* %countOnes, align 4
  %call169 = call double @_Z17calcLikelihoodSumPiS_i(i32* %130, i32* %131, i32 %132)
  %133 = load double*, double** %likelihood, align 8
  %134 = load i32, i32* %x, align 4
  %idxprom170 = sext i32 %134 to i64
  %arrayidx171 = getelementptr inbounds double, double* %133, i64 %idxprom170
  store double %call169, double* %arrayidx171, align 8
  %135 = load double*, double** %likelihood, align 8
  %136 = load i32, i32* %x, align 4
  %idxprom172 = sext i32 %136 to i64
  %arrayidx173 = getelementptr inbounds double, double* %135, i64 %idxprom172
  %137 = load double, double* %arrayidx173, align 8
  %138 = load i32, i32* %countOnes, align 4
  %conv174 = sitofp i32 %138 to double
  %div175 = fdiv double %137, %conv174
  %139 = load double*, double** %likelihood, align 8
  %140 = load i32, i32* %x, align 4
  %idxprom176 = sext i32 %140 to i64
  %arrayidx177 = getelementptr inbounds double, double* %139, i64 %idxprom176
  store double %div175, double* %arrayidx177, align 8
  br label %for.inc178

for.inc178:                                       ; preds = %for.end168
  %141 = load i32, i32* %x, align 4
  %inc179 = add nsw i32 %141, 1
  store i32 %inc179, i32* %x, align 4
  br label %for.cond127

for.end180:                                       ; preds = %for.cond127
  %call181 = call i64 @_Z8get_timev()
  store i64 %call181, i64* %likelihood_time, align 8
  %142 = load i64, i64* %error, align 8
  %143 = load i64, i64* %likelihood_time, align 8
  %call182 = call float @_Z12elapsed_timexx(i64 %142, i64 %143)
  %conv183 = fpext float %call182 to double
  %call184 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), double %conv183)
  store i32 0, i32* %x, align 4
  br label %for.cond185

for.cond185:                                      ; preds = %for.inc196, %for.end180
  %144 = load i32, i32* %x, align 4
  %145 = load i32, i32* %Nparticles.addr, align 4
  %cmp186 = icmp slt i32 %144, %145
  br i1 %cmp186, label %for.body187, label %for.end198

for.body187:                                      ; preds = %for.cond185
  %146 = load double*, double** %weights, align 8
  %147 = load i32, i32* %x, align 4
  %idxprom188 = sext i32 %147 to i64
  %arrayidx189 = getelementptr inbounds double, double* %146, i64 %idxprom188
  %148 = load double, double* %arrayidx189, align 8
  %149 = load double*, double** %likelihood, align 8
  %150 = load i32, i32* %x, align 4
  %idxprom190 = sext i32 %150 to i64
  %arrayidx191 = getelementptr inbounds double, double* %149, i64 %idxprom190
  %151 = load double, double* %arrayidx191, align 8
  %call192 = call double @exp(double %151) #10
  %mul193 = fmul contract double %148, %call192
  %152 = load double*, double** %weights, align 8
  %153 = load i32, i32* %x, align 4
  %idxprom194 = sext i32 %153 to i64
  %arrayidx195 = getelementptr inbounds double, double* %152, i64 %idxprom194
  store double %mul193, double* %arrayidx195, align 8
  br label %for.inc196

for.inc196:                                       ; preds = %for.body187
  %154 = load i32, i32* %x, align 4
  %inc197 = add nsw i32 %154, 1
  store i32 %inc197, i32* %x, align 4
  br label %for.cond185

for.end198:                                       ; preds = %for.cond185
  %call199 = call i64 @_Z8get_timev()
  store i64 %call199, i64* %exponential, align 8
  %155 = load i64, i64* %likelihood_time, align 8
  %156 = load i64, i64* %exponential, align 8
  %call200 = call float @_Z12elapsed_timexx(i64 %155, i64 %156)
  %conv201 = fpext float %call200 to double
  %call202 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), double %conv201)
  store double 0.000000e+00, double* %sumWeights, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond203

for.cond203:                                      ; preds = %for.inc209, %for.end198
  %157 = load i32, i32* %x, align 4
  %158 = load i32, i32* %Nparticles.addr, align 4
  %cmp204 = icmp slt i32 %157, %158
  br i1 %cmp204, label %for.body205, label %for.end211

for.body205:                                      ; preds = %for.cond203
  %159 = load double*, double** %weights, align 8
  %160 = load i32, i32* %x, align 4
  %idxprom206 = sext i32 %160 to i64
  %arrayidx207 = getelementptr inbounds double, double* %159, i64 %idxprom206
  %161 = load double, double* %arrayidx207, align 8
  %162 = load double, double* %sumWeights, align 8
  %add208 = fadd contract double %162, %161
  store double %add208, double* %sumWeights, align 8
  br label %for.inc209

for.inc209:                                       ; preds = %for.body205
  %163 = load i32, i32* %x, align 4
  %inc210 = add nsw i32 %163, 1
  store i32 %inc210, i32* %x, align 4
  br label %for.cond203

for.end211:                                       ; preds = %for.cond203
  %call212 = call i64 @_Z8get_timev()
  store i64 %call212, i64* %sum_time, align 8
  %164 = load i64, i64* %exponential, align 8
  %165 = load i64, i64* %sum_time, align 8
  %call213 = call float @_Z12elapsed_timexx(i64 %164, i64 %165)
  %conv214 = fpext float %call213 to double
  %call215 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0), double %conv214)
  store i32 0, i32* %x, align 4
  br label %for.cond216

for.cond216:                                      ; preds = %for.inc224, %for.end211
  %166 = load i32, i32* %x, align 4
  %167 = load i32, i32* %Nparticles.addr, align 4
  %cmp217 = icmp slt i32 %166, %167
  br i1 %cmp217, label %for.body218, label %for.end226

for.body218:                                      ; preds = %for.cond216
  %168 = load double*, double** %weights, align 8
  %169 = load i32, i32* %x, align 4
  %idxprom219 = sext i32 %169 to i64
  %arrayidx220 = getelementptr inbounds double, double* %168, i64 %idxprom219
  %170 = load double, double* %arrayidx220, align 8
  %171 = load double, double* %sumWeights, align 8
  %div221 = fdiv double %170, %171
  %172 = load double*, double** %weights, align 8
  %173 = load i32, i32* %x, align 4
  %idxprom222 = sext i32 %173 to i64
  %arrayidx223 = getelementptr inbounds double, double* %172, i64 %idxprom222
  store double %div221, double* %arrayidx223, align 8
  br label %for.inc224

for.inc224:                                       ; preds = %for.body218
  %174 = load i32, i32* %x, align 4
  %inc225 = add nsw i32 %174, 1
  store i32 %inc225, i32* %x, align 4
  br label %for.cond216

for.end226:                                       ; preds = %for.cond216
  %call227 = call i64 @_Z8get_timev()
  store i64 %call227, i64* %normalize, align 8
  %175 = load i64, i64* %sum_time, align 8
  %176 = load i64, i64* %normalize, align 8
  %call228 = call float @_Z12elapsed_timexx(i64 %175, i64 %176)
  %conv229 = fpext float %call228 to double
  %call230 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i64 0, i64 0), double %conv229)
  store double 0.000000e+00, double* %xe, align 8
  store double 0.000000e+00, double* %ye, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond231

for.cond231:                                      ; preds = %for.inc246, %for.end226
  %177 = load i32, i32* %x, align 4
  %178 = load i32, i32* %Nparticles.addr, align 4
  %cmp232 = icmp slt i32 %177, %178
  br i1 %cmp232, label %for.body233, label %for.end248

for.body233:                                      ; preds = %for.cond231
  %179 = load double*, double** %arrayX, align 8
  %180 = load i32, i32* %x, align 4
  %idxprom234 = sext i32 %180 to i64
  %arrayidx235 = getelementptr inbounds double, double* %179, i64 %idxprom234
  %181 = load double, double* %arrayidx235, align 8
  %182 = load double*, double** %weights, align 8
  %183 = load i32, i32* %x, align 4
  %idxprom236 = sext i32 %183 to i64
  %arrayidx237 = getelementptr inbounds double, double* %182, i64 %idxprom236
  %184 = load double, double* %arrayidx237, align 8
  %mul238 = fmul contract double %181, %184
  %185 = load double, double* %xe, align 8
  %add239 = fadd contract double %185, %mul238
  store double %add239, double* %xe, align 8
  %186 = load double*, double** %arrayY, align 8
  %187 = load i32, i32* %x, align 4
  %idxprom240 = sext i32 %187 to i64
  %arrayidx241 = getelementptr inbounds double, double* %186, i64 %idxprom240
  %188 = load double, double* %arrayidx241, align 8
  %189 = load double*, double** %weights, align 8
  %190 = load i32, i32* %x, align 4
  %idxprom242 = sext i32 %190 to i64
  %arrayidx243 = getelementptr inbounds double, double* %189, i64 %idxprom242
  %191 = load double, double* %arrayidx243, align 8
  %mul244 = fmul contract double %188, %191
  %192 = load double, double* %ye, align 8
  %add245 = fadd contract double %192, %mul244
  store double %add245, double* %ye, align 8
  br label %for.inc246

for.inc246:                                       ; preds = %for.body233
  %193 = load i32, i32* %x, align 4
  %inc247 = add nsw i32 %193, 1
  store i32 %inc247, i32* %x, align 4
  br label %for.cond231

for.end248:                                       ; preds = %for.cond231
  %call249 = call i64 @_Z8get_timev()
  store i64 %call249, i64* %move_time, align 8
  %194 = load i64, i64* %normalize, align 8
  %195 = load i64, i64* %move_time, align 8
  %call250 = call float @_Z12elapsed_timexx(i64 %194, i64 %195)
  %conv251 = fpext float %call250 to double
  %call252 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), double %conv251)
  %196 = load double, double* %xe, align 8
  %call253 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), double %196)
  %197 = load double, double* %ye, align 8
  %call254 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), double %197)
  %198 = load double, double* %xe, align 8
  %199 = load i32, i32* %IszY.addr, align 4
  %conv255 = sitofp i32 %199 to double
  %div256 = fdiv double %conv255, 2.000000e+00
  %call257 = call double @_Z11roundDoubled(double %div256)
  %conv258 = fptosi double %call257 to i32
  %conv259 = sitofp i32 %conv258 to double
  %sub260 = fsub contract double %198, %conv259
  %call261 = call double @_ZSt3powdi(double %sub260, i32 2)
  %200 = load double, double* %ye, align 8
  %201 = load i32, i32* %IszX.addr, align 4
  %conv262 = sitofp i32 %201 to double
  %div263 = fdiv double %conv262, 2.000000e+00
  %call264 = call double @_Z11roundDoubled(double %div263)
  %conv265 = fptosi double %call264 to i32
  %conv266 = sitofp i32 %conv265 to double
  %sub267 = fsub contract double %200, %conv266
  %call268 = call double @_ZSt3powdi(double %sub267, i32 2)
  %add269 = fadd contract double %call261, %call268
  %call270 = call double @sqrt(double %add269) #10
  store double %call270, double* %distance, align 8
  %202 = load double, double* %distance, align 8
  %call271 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), double %202)
  %203 = load double*, double** %weights, align 8
  %arrayidx272 = getelementptr inbounds double, double* %203, i64 0
  %204 = load double, double* %arrayidx272, align 8
  %205 = load double*, double** %CDF, align 8
  %arrayidx273 = getelementptr inbounds double, double* %205, i64 0
  store double %204, double* %arrayidx273, align 8
  store i32 1, i32* %x, align 4
  br label %for.cond274

for.cond274:                                      ; preds = %for.inc285, %for.end248
  %206 = load i32, i32* %x, align 4
  %207 = load i32, i32* %Nparticles.addr, align 4
  %cmp275 = icmp slt i32 %206, %207
  br i1 %cmp275, label %for.body276, label %for.end287

for.body276:                                      ; preds = %for.cond274
  %208 = load double*, double** %weights, align 8
  %209 = load i32, i32* %x, align 4
  %idxprom277 = sext i32 %209 to i64
  %arrayidx278 = getelementptr inbounds double, double* %208, i64 %idxprom277
  %210 = load double, double* %arrayidx278, align 8
  %211 = load double*, double** %CDF, align 8
  %212 = load i32, i32* %x, align 4
  %sub279 = sub nsw i32 %212, 1
  %idxprom280 = sext i32 %sub279 to i64
  %arrayidx281 = getelementptr inbounds double, double* %211, i64 %idxprom280
  %213 = load double, double* %arrayidx281, align 8
  %add282 = fadd contract double %210, %213
  %214 = load double*, double** %CDF, align 8
  %215 = load i32, i32* %x, align 4
  %idxprom283 = sext i32 %215 to i64
  %arrayidx284 = getelementptr inbounds double, double* %214, i64 %idxprom283
  store double %add282, double* %arrayidx284, align 8
  br label %for.inc285

for.inc285:                                       ; preds = %for.body276
  %216 = load i32, i32* %x, align 4
  %inc286 = add nsw i32 %216, 1
  store i32 %inc286, i32* %x, align 4
  br label %for.cond274

for.end287:                                       ; preds = %for.cond274
  %call288 = call i64 @_Z8get_timev()
  store i64 %call288, i64* %cum_sum, align 8
  %217 = load i64, i64* %move_time, align 8
  %218 = load i64, i64* %cum_sum, align 8
  %call289 = call float @_Z12elapsed_timexx(i64 %217, i64 %218)
  %conv290 = fpext float %call289 to double
  %call291 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), double %conv290)
  %219 = load i32, i32* %Nparticles.addr, align 4
  %conv292 = sitofp i32 %219 to double
  %div293 = fdiv double 1.000000e+00, %conv292
  %220 = load i32*, i32** %seed.addr, align 8
  %call294 = call double @_Z5randuPii(i32* %220, i32 0)
  %mul295 = fmul contract double %div293, %call294
  store double %mul295, double* %u1, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond296

for.cond296:                                      ; preds = %for.inc305, %for.end287
  %221 = load i32, i32* %x, align 4
  %222 = load i32, i32* %Nparticles.addr, align 4
  %cmp297 = icmp slt i32 %221, %222
  br i1 %cmp297, label %for.body298, label %for.end307

for.body298:                                      ; preds = %for.cond296
  %223 = load double, double* %u1, align 8
  %224 = load i32, i32* %x, align 4
  %conv299 = sitofp i32 %224 to double
  %225 = load i32, i32* %Nparticles.addr, align 4
  %conv300 = sitofp i32 %225 to double
  %div301 = fdiv double %conv299, %conv300
  %add302 = fadd contract double %223, %div301
  %226 = load double*, double** %u, align 8
  %227 = load i32, i32* %x, align 4
  %idxprom303 = sext i32 %227 to i64
  %arrayidx304 = getelementptr inbounds double, double* %226, i64 %idxprom303
  store double %add302, double* %arrayidx304, align 8
  br label %for.inc305

for.inc305:                                       ; preds = %for.body298
  %228 = load i32, i32* %x, align 4
  %inc306 = add nsw i32 %228, 1
  store i32 %inc306, i32* %x, align 4
  br label %for.cond296

for.end307:                                       ; preds = %for.cond296
  %call308 = call i64 @_Z8get_timev()
  store i64 %call308, i64* %u_time, align 8
  %229 = load i64, i64* %cum_sum, align 8
  %230 = load i64, i64* %u_time, align 8
  %call309 = call float @_Z12elapsed_timexx(i64 %229, i64 %230)
  %conv310 = fpext float %call309 to double
  %call311 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), double %conv310)
  %call312 = call i64 @_Z8get_timev()
  store i64 %call312, i64* %start_copy, align 8
  %231 = load double*, double** %arrayX_GPU, align 8
  %232 = bitcast double* %231 to i8*
  %233 = load double*, double** %arrayX, align 8
  %234 = bitcast double* %233 to i8*
  %235 = load i32, i32* %Nparticles.addr, align 4
  %conv313 = sext i32 %235 to i64
  %mul314 = mul i64 8, %conv313
  %call315 = call i32 @cudaMemcpy(i8* %232, i8* %234, i64 %mul314, i32 1)
  %236 = load double*, double** %arrayY_GPU, align 8
  %237 = bitcast double* %236 to i8*
  %238 = load double*, double** %arrayY, align 8
  %239 = bitcast double* %238 to i8*
  %240 = load i32, i32* %Nparticles.addr, align 4
  %conv316 = sext i32 %240 to i64
  %mul317 = mul i64 8, %conv316
  %call318 = call i32 @cudaMemcpy(i8* %237, i8* %239, i64 %mul317, i32 1)
  %241 = load double*, double** %xj_GPU, align 8
  %242 = bitcast double* %241 to i8*
  %243 = load double*, double** %xj, align 8
  %244 = bitcast double* %243 to i8*
  %245 = load i32, i32* %Nparticles.addr, align 4
  %conv319 = sext i32 %245 to i64
  %mul320 = mul i64 8, %conv319
  %call321 = call i32 @cudaMemcpy(i8* %242, i8* %244, i64 %mul320, i32 1)
  %246 = load double*, double** %yj_GPU, align 8
  %247 = bitcast double* %246 to i8*
  %248 = load double*, double** %yj, align 8
  %249 = bitcast double* %248 to i8*
  %250 = load i32, i32* %Nparticles.addr, align 4
  %conv322 = sext i32 %250 to i64
  %mul323 = mul i64 8, %conv322
  %call324 = call i32 @cudaMemcpy(i8* %247, i8* %249, i64 %mul323, i32 1)
  %251 = load double*, double** %CDF_GPU, align 8
  %252 = bitcast double* %251 to i8*
  %253 = load double*, double** %CDF, align 8
  %254 = bitcast double* %253 to i8*
  %255 = load i32, i32* %Nparticles.addr, align 4
  %conv325 = sext i32 %255 to i64
  %mul326 = mul i64 8, %conv325
  %call327 = call i32 @cudaMemcpy(i8* %252, i8* %254, i64 %mul326, i32 1)
  %256 = load double*, double** %u_GPU, align 8
  %257 = bitcast double* %256 to i8*
  %258 = load double*, double** %u, align 8
  %259 = bitcast double* %258 to i8*
  %260 = load i32, i32* %Nparticles.addr, align 4
  %conv328 = sext i32 %260 to i64
  %mul329 = mul i64 8, %conv328
  %call330 = call i32 @cudaMemcpy(i8* %257, i8* %259, i64 %mul329, i32 1)
  %call331 = call i64 @_Z8get_timev()
  store i64 %call331, i64* %end_copy, align 8
  %261 = load i32, i32* %Nparticles.addr, align 4
  %conv332 = sitofp i32 %261 to double
  %div333 = fdiv double %conv332, 1.280000e+02
  %262 = call double @llvm.ceil.f64(double %div333)
  %conv334 = fptosi double %262 to i32
  store i32 %conv334, i32* %num_blocks, align 4
  %263 = load i32, i32* %num_blocks, align 4
  call void @_ZN4dim3C2Ejjj(%struct.dim3* %agg.tmp, i32 %263, i32 1, i32 1)
  call void @_ZN4dim3C2Ejjj(%struct.dim3* %agg.tmp335, i32 128, i32 1, i32 1)
  %264 = bitcast { i64, i32 }* %agg.tmp.coerce to i8*
  %265 = bitcast %struct.dim3* %agg.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %264, i8* align 4 %265, i64 12, i1 false)
  %266 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.tmp.coerce, i32 0, i32 0
  %267 = load i64, i64* %266, align 4
  %268 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.tmp.coerce, i32 0, i32 1
  %269 = load i32, i32* %268, align 4
  %270 = bitcast { i64, i32 }* %agg.tmp335.coerce to i8*
  %271 = bitcast %struct.dim3* %agg.tmp335 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %270, i8* align 4 %271, i64 12, i1 false)
  %272 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.tmp335.coerce, i32 0, i32 0
  %273 = load i64, i64* %272, align 4
  %274 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.tmp335.coerce, i32 0, i32 1
  %275 = load i32, i32* %274, align 4
  %call336 = call i32 @__cudaPushCallConfiguration(i64 %267, i32 %269, i64 %273, i32 %275, i64 0, i8* null)
  %tobool = icmp ne i32 %call336, 0
  br i1 %tobool, label %kcall.end, label %kcall.configok

kcall.configok:                                   ; preds = %for.end307
  %276 = load double*, double** %arrayX_GPU, align 8
  %277 = load double*, double** %arrayY_GPU, align 8
  %278 = load double*, double** %CDF_GPU, align 8
  %279 = load double*, double** %u_GPU, align 8
  %280 = load double*, double** %xj_GPU, align 8
  %281 = load double*, double** %yj_GPU, align 8
  %282 = load i32, i32* %Nparticles.addr, align 4
  call void @_Z6kernelPdS_S_S_S_S_i(double* %276, double* %277, double* %278, double* %279, double* %280, double* %281, i32 %282)
  br label %kcall.end

kcall.end:                                        ; preds = %kcall.configok, %for.end307
  %call337 = call i32 @cudaThreadSynchronize()
  %call338 = call i64 @_Z8get_timev()
  store i64 %call338, i64* %start_copy_back, align 8
  %283 = load double*, double** %yj, align 8
  %284 = bitcast double* %283 to i8*
  %285 = load double*, double** %yj_GPU, align 8
  %286 = bitcast double* %285 to i8*
  %287 = load i32, i32* %Nparticles.addr, align 4
  %conv339 = sext i32 %287 to i64
  %mul340 = mul i64 8, %conv339
  %call341 = call i32 @cudaMemcpy(i8* %284, i8* %286, i64 %mul340, i32 2)
  %288 = load double*, double** %xj, align 8
  %289 = bitcast double* %288 to i8*
  %290 = load double*, double** %xj_GPU, align 8
  %291 = bitcast double* %290 to i8*
  %292 = load i32, i32* %Nparticles.addr, align 4
  %conv342 = sext i32 %292 to i64
  %mul343 = mul i64 8, %conv342
  %call344 = call i32 @cudaMemcpy(i8* %289, i8* %291, i64 %mul343, i32 2)
  %call345 = call i64 @_Z8get_timev()
  store i64 %call345, i64* %end_copy_back, align 8
  %293 = load i64, i64* %start_copy, align 8
  %294 = load i64, i64* %end_copy, align 8
  %call346 = call float @_Z12elapsed_timexx(i64 %293, i64 %294)
  %conv347 = fpext float %call346 to double
  %call348 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), double %conv347)
  %295 = load i64, i64* %end_copy, align 8
  %296 = load i64, i64* %start_copy_back, align 8
  %call349 = call float @_Z12elapsed_timexx(i64 %295, i64 %296)
  %conv350 = fpext float %call349 to double
  %call351 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), double %conv350)
  %297 = load i64, i64* %start_copy_back, align 8
  %298 = load i64, i64* %end_copy_back, align 8
  %call352 = call float @_Z12elapsed_timexx(i64 %297, i64 %298)
  %conv353 = fpext float %call352 to double
  %call354 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.16, i64 0, i64 0), double %conv353)
  %call355 = call i64 @_Z8get_timev()
  store i64 %call355, i64* %xyj_time, align 8
  %299 = load i64, i64* %u_time, align 8
  %300 = load i64, i64* %xyj_time, align 8
  %call356 = call float @_Z12elapsed_timexx(i64 %299, i64 %300)
  %conv357 = fpext float %call356 to double
  %call358 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.17, i64 0, i64 0), double %conv357)
  store i32 0, i32* %x, align 4
  br label %for.cond359

for.cond359:                                      ; preds = %for.inc374, %kcall.end
  %301 = load i32, i32* %x, align 4
  %302 = load i32, i32* %Nparticles.addr, align 4
  %cmp360 = icmp slt i32 %301, %302
  br i1 %cmp360, label %for.body361, label %for.end376

for.body361:                                      ; preds = %for.cond359
  %303 = load double*, double** %xj, align 8
  %304 = load i32, i32* %x, align 4
  %idxprom362 = sext i32 %304 to i64
  %arrayidx363 = getelementptr inbounds double, double* %303, i64 %idxprom362
  %305 = load double, double* %arrayidx363, align 8
  %306 = load double*, double** %arrayX, align 8
  %307 = load i32, i32* %x, align 4
  %idxprom364 = sext i32 %307 to i64
  %arrayidx365 = getelementptr inbounds double, double* %306, i64 %idxprom364
  store double %305, double* %arrayidx365, align 8
  %308 = load double*, double** %yj, align 8
  %309 = load i32, i32* %x, align 4
  %idxprom366 = sext i32 %309 to i64
  %arrayidx367 = getelementptr inbounds double, double* %308, i64 %idxprom366
  %310 = load double, double* %arrayidx367, align 8
  %311 = load double*, double** %arrayY, align 8
  %312 = load i32, i32* %x, align 4
  %idxprom368 = sext i32 %312 to i64
  %arrayidx369 = getelementptr inbounds double, double* %311, i64 %idxprom368
  store double %310, double* %arrayidx369, align 8
  %313 = load i32, i32* %Nparticles.addr, align 4
  %conv370 = sitofp i32 %313 to double
  %div371 = fdiv double 1.000000e+00, %conv370
  %314 = load double*, double** %weights, align 8
  %315 = load i32, i32* %x, align 4
  %idxprom372 = sext i32 %315 to i64
  %arrayidx373 = getelementptr inbounds double, double* %314, i64 %idxprom372
  store double %div371, double* %arrayidx373, align 8
  br label %for.inc374

for.inc374:                                       ; preds = %for.body361
  %316 = load i32, i32* %x, align 4
  %inc375 = add nsw i32 %316, 1
  store i32 %inc375, i32* %x, align 4
  br label %for.cond359

for.end376:                                       ; preds = %for.cond359
  %call377 = call i64 @_Z8get_timev()
  store i64 %call377, i64* %reset, align 8
  %317 = load i64, i64* %xyj_time, align 8
  %318 = load i64, i64* %reset, align 8
  %call378 = call float @_Z12elapsed_timexx(i64 %317, i64 %318)
  %conv379 = fpext float %call378 to double
  %call380 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.18, i64 0, i64 0), double %conv379)
  br label %for.inc381

for.inc381:                                       ; preds = %for.end376
  %319 = load i32, i32* %k, align 4
  %inc382 = add nsw i32 %319, 1
  store i32 %inc382, i32* %k, align 4
  br label %for.cond97

for.end383:                                       ; preds = %for.cond97
  %call384 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0))
  store i32 0, i32* %i, align 4
  br label %for.cond385

for.cond385:                                      ; preds = %for.inc391, %for.end383
  %320 = load i32, i32* %i, align 4
  %cmp386 = icmp slt i32 %320, 10
  br i1 %cmp386, label %for.body387, label %for.end393

for.body387:                                      ; preds = %for.cond385
  %321 = load double*, double** %arrayX, align 8
  %322 = load i32, i32* %i, align 4
  %idxprom388 = sext i32 %322 to i64
  %arrayidx389 = getelementptr inbounds double, double* %321, i64 %idxprom388
  %323 = load double, double* %arrayidx389, align 8
  %call390 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0), double %323)
  br label %for.inc391

for.inc391:                                       ; preds = %for.body387
  %324 = load i32, i32* %i, align 4
  %inc392 = add nsw i32 %324, 1
  store i32 %inc392, i32* %i, align 4
  br label %for.cond385

for.end393:                                       ; preds = %for.cond385
  %325 = load double*, double** %u_GPU, align 8
  %326 = bitcast double* %325 to i8*
  %call394 = call i32 @cudaFree(i8* %326)
  %327 = load double*, double** %CDF_GPU, align 8
  %328 = bitcast double* %327 to i8*
  %call395 = call i32 @cudaFree(i8* %328)
  %329 = load double*, double** %yj_GPU, align 8
  %330 = bitcast double* %329 to i8*
  %call396 = call i32 @cudaFree(i8* %330)
  %331 = load double*, double** %xj_GPU, align 8
  %332 = bitcast double* %331 to i8*
  %call397 = call i32 @cudaFree(i8* %332)
  %333 = load double*, double** %arrayY_GPU, align 8
  %334 = bitcast double* %333 to i8*
  %call398 = call i32 @cudaFree(i8* %334)
  %335 = load double*, double** %arrayX_GPU, align 8
  %336 = bitcast double* %335 to i8*
  %call399 = call i32 @cudaFree(i8* %336)
  %337 = load i32*, i32** %disk, align 8
  %338 = bitcast i32* %337 to i8*
  call void @free(i8* %338) #10
  %339 = load double*, double** %objxy, align 8
  %340 = bitcast double* %339 to i8*
  call void @free(i8* %340) #10
  %341 = load double*, double** %weights, align 8
  %342 = bitcast double* %341 to i8*
  call void @free(i8* %342) #10
  %343 = load double*, double** %likelihood, align 8
  %344 = bitcast double* %343 to i8*
  call void @free(i8* %344) #10
  %345 = load double*, double** %arrayX, align 8
  %346 = bitcast double* %345 to i8*
  call void @free(i8* %346) #10
  %347 = load double*, double** %arrayY, align 8
  %348 = bitcast double* %347 to i8*
  call void @free(i8* %348) #10
  %349 = load double*, double** %xj, align 8
  %350 = bitcast double* %349 to i8*
  call void @free(i8* %350) #10
  %351 = load double*, double** %yj, align 8
  %352 = bitcast double* %351 to i8*
  call void @free(i8* %352) #10
  %353 = load double*, double** %CDF, align 8
  %354 = bitcast double* %353 to i8*
  call void @free(i8* %354) #10
  %355 = load double*, double** %u, align 8
  %356 = bitcast double* %355 to i8*
  call void @free(i8* %356) #10
  %357 = load i32*, i32** %ind, align 8
  %358 = bitcast i32* %357 to i8*
  call void @free(i8* %358) #10
  ret void
}

declare dso_local i32 @cudaMalloc(i8**, i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local double @_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %__x) #0 comdat {
entry:
  %__x.addr = alloca i32, align 4
  store i32 %__x, i32* %__x.addr, align 4
  %0 = load i32, i32* %__x.addr, align 4
  %conv = sitofp i32 %0 to double
  %1 = call double @llvm.fabs.f64(double %conv)
  ret double %1
}

; Function Attrs: nounwind
declare dso_local double @exp(double) #1

declare dso_local i32 @cudaMemcpy(i8*, i8*, i64, i32) #3

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #6

declare dso_local i32 @__cudaPushCallConfiguration(i64, i32, i64, i32, i64, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN4dim3C2Ejjj(%struct.dim3* %this, i32 %vx, i32 %vy, i32 %vz) unnamed_addr #0 comdat align 2 {
entry:
  %this.addr = alloca %struct.dim3*, align 8
  %vx.addr = alloca i32, align 4
  %vy.addr = alloca i32, align 4
  %vz.addr = alloca i32, align 4
  store %struct.dim3* %this, %struct.dim3** %this.addr, align 8
  store i32 %vx, i32* %vx.addr, align 4
  store i32 %vy, i32* %vy.addr, align 4
  store i32 %vz, i32* %vz.addr, align 4
  %this1 = load %struct.dim3*, %struct.dim3** %this.addr, align 8
  %x = getelementptr inbounds %struct.dim3, %struct.dim3* %this1, i32 0, i32 0
  %0 = load i32, i32* %vx.addr, align 4
  store i32 %0, i32* %x, align 4
  %y = getelementptr inbounds %struct.dim3, %struct.dim3* %this1, i32 0, i32 1
  %1 = load i32, i32* %vy.addr, align 4
  store i32 %1, i32* %y, align 4
  %z = getelementptr inbounds %struct.dim3, %struct.dim3* %this1, i32 0, i32 2
  %2 = load i32, i32* %vz.addr, align 4
  store i32 %2, i32* %z, align 4
  ret void
}

declare dso_local i32 @cudaThreadSynchronize() #3

declare dso_local i32 @cudaFree(i8*) #3

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #8 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %usage = alloca i8*, align 8
  %IszX = alloca i32, align 4
  %IszY = alloca i32, align 4
  %Nfr = alloca i32, align 4
  %Nparticles = alloca i32, align 4
  %seed = alloca i32*, align 8
  %i = alloca i32, align 4
  %I = alloca i32*, align 8
  %start = alloca i64, align 8
  %endVideoSequence = alloca i64, align 8
  %endParticleFilter = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %call = call i32 @cudaSetDevice(i32 0)
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.21, i64 0, i64 0), i8** %usage, align 8
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp ne i32 %0, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %usage, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0), i8* %1)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 1
  %3 = load i8*, i8** %arrayidx, align 8
  %call2 = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i64 0, i64 0)) #13
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 8
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i64 3
  %5 = load i8*, i8** %arrayidx3, align 8
  %call4 = call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0)) #13
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then14, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %argv.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i64 5
  %7 = load i8*, i8** %arrayidx7, align 8
  %call8 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i64 0, i64 0)) #13
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then14, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %8 = load i8**, i8*** %argv.addr, align 8
  %arrayidx11 = getelementptr inbounds i8*, i8** %8, i64 7
  %9 = load i8*, i8** %arrayidx11, align 8
  %call12 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0)) #13
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %if.end
  %10 = load i8*, i8** %usage, align 8
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0), i8* %10)
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %lor.lhs.false10
  %11 = load i8**, i8*** %argv.addr, align 8
  %arrayidx17 = getelementptr inbounds i8*, i8** %11, i64 2
  %12 = load i8*, i8** %arrayidx17, align 8
  %call18 = call i32 (i8*, i8*, ...) @sscanf(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i32* %IszX) #10
  %cmp19 = icmp eq i32 %call18, -1
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end16
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.28, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end16
  %13 = load i32, i32* %IszX, align 4
  %cmp23 = icmp sle i32 %13, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end22
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %if.end22
  %14 = load i8**, i8*** %argv.addr, align 8
  %arrayidx27 = getelementptr inbounds i8*, i8** %14, i64 4
  %15 = load i8*, i8** %arrayidx27, align 8
  %call28 = call i32 (i8*, i8*, ...) @sscanf(i8* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i32* %IszY) #10
  %cmp29 = icmp eq i32 %call28, -1
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end26
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.30, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end32:                                         ; preds = %if.end26
  %16 = load i32, i32* %IszY, align 4
  %cmp33 = icmp sle i32 %16, 0
  br i1 %cmp33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.end32
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end32
  %17 = load i8**, i8*** %argv.addr, align 8
  %arrayidx37 = getelementptr inbounds i8*, i8** %17, i64 6
  %18 = load i8*, i8** %arrayidx37, align 8
  %call38 = call i32 (i8*, i8*, ...) @sscanf(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i32* %Nfr) #10
  %cmp39 = icmp eq i32 %call38, -1
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end36
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.32, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %19 = load i32, i32* %Nfr, align 4
  %cmp43 = icmp sle i32 %19, 0
  br i1 %cmp43, label %if.then44, label %if.end46

if.then44:                                        ; preds = %if.end42
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.33, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end46:                                         ; preds = %if.end42
  %20 = load i8**, i8*** %argv.addr, align 8
  %arrayidx47 = getelementptr inbounds i8*, i8** %20, i64 8
  %21 = load i8*, i8** %arrayidx47, align 8
  %call48 = call i32 (i8*, i8*, ...) @sscanf(i8* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i32* %Nparticles) #10
  %cmp49 = icmp eq i32 %call48, -1
  br i1 %cmp49, label %if.then50, label %if.end52

if.then50:                                        ; preds = %if.end46
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.34, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %if.end46
  %22 = load i32, i32* %Nparticles, align 4
  %cmp53 = icmp sle i32 %22, 0
  br i1 %cmp53, label %if.then54, label %if.end56

if.then54:                                        ; preds = %if.end52
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.35, i64 0, i64 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end56:                                         ; preds = %if.end52
  %23 = load i32, i32* %Nparticles, align 4
  %conv = sext i32 %23 to i64
  %mul = mul i64 4, %conv
  %call57 = call noalias i8* @malloc(i64 %mul) #10
  %24 = bitcast i8* %call57 to i32*
  store i32* %24, i32** %seed, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end56
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %Nparticles, align 4
  %cmp58 = icmp slt i32 %25, %26
  br i1 %cmp58, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load i32, i32* %i, align 4
  %28 = load i32*, i32** %seed, align 8
  %29 = load i32, i32* %i, align 4
  %idxprom = sext i32 %29 to i64
  %arrayidx59 = getelementptr inbounds i32, i32* %28, i64 %idxprom
  store i32 %27, i32* %arrayidx59, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load i32, i32* %IszX, align 4
  %conv60 = sext i32 %31 to i64
  %mul61 = mul i64 4, %conv60
  %32 = load i32, i32* %IszY, align 4
  %conv62 = sext i32 %32 to i64
  %mul63 = mul i64 %mul61, %conv62
  %33 = load i32, i32* %Nfr, align 4
  %conv64 = sext i32 %33 to i64
  %mul65 = mul i64 %mul63, %conv64
  %call66 = call noalias i8* @malloc(i64 %mul65) #10
  %34 = bitcast i8* %call66 to i32*
  store i32* %34, i32** %I, align 8
  %call67 = call i64 @_Z8get_timev()
  store i64 %call67, i64* %start, align 8
  %35 = load i32*, i32** %I, align 8
  %36 = load i32, i32* %IszX, align 4
  %37 = load i32, i32* %IszY, align 4
  %38 = load i32, i32* %Nfr, align 4
  %39 = load i32*, i32** %seed, align 8
  call void @_Z13videoSequencePiiiiS_(i32* %35, i32 %36, i32 %37, i32 %38, i32* %39)
  %call68 = call i64 @_Z8get_timev()
  store i64 %call68, i64* %endVideoSequence, align 8
  %40 = load i64, i64* %start, align 8
  %41 = load i64, i64* %endVideoSequence, align 8
  %call69 = call float @_Z12elapsed_timexx(i64 %40, i64 %41)
  %conv70 = fpext float %call69 to double
  %call71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.36, i64 0, i64 0), double %conv70)
  %42 = load i32*, i32** %I, align 8
  %43 = load i32, i32* %IszX, align 4
  %44 = load i32, i32* %IszY, align 4
  %45 = load i32, i32* %Nfr, align 4
  %46 = load i32*, i32** %seed, align 8
  %47 = load i32, i32* %Nparticles, align 4
  call void @_Z14particleFilterPiiiiS_i(i32* %42, i32 %43, i32 %44, i32 %45, i32* %46, i32 %47)
  %call72 = call i64 @_Z8get_timev()
  store i64 %call72, i64* %endParticleFilter, align 8
  %48 = load i64, i64* %endVideoSequence, align 8
  %49 = load i64, i64* %endParticleFilter, align 8
  %call73 = call float @_Z12elapsed_timexx(i64 %48, i64 %49)
  %conv74 = fpext float %call73 to double
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i64 0, i64 0), double %conv74)
  %50 = load i64, i64* %start, align 8
  %51 = load i64, i64* %endParticleFilter, align 8
  %call76 = call float @_Z12elapsed_timexx(i64 %50, i64 %51)
  %conv77 = fpext float %call76 to double
  %call78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38, i64 0, i64 0), double %conv77)
  %52 = load i32*, i32** %seed, align 8
  %53 = bitcast i32* %52 to i8*
  call void @free(i8* %53) #10
  %54 = load i32*, i32** %I, align 8
  %55 = bitcast i32* %54 to i8*
  call void @free(i8* %55) #10
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then54, %if.then50, %if.then44, %if.then40, %if.then34, %if.then30, %if.then24, %if.then20, %if.then14, %if.then
  %56 = load i32, i32* %retval, align 4
  ret i32 %56
}

declare dso_local i32 @cudaSetDevice(i32) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #9

; Function Attrs: nounwind
declare dso_local i32 @sscanf(i8*, i8*, ...) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.powi.f64(double, i32) #6

define internal void @__cuda_register_globals(i8** %0) {
entry:
  %1 = call i32 @__cudaRegisterFunction(i8** %0, i8* bitcast (void (double*, double*, double*, double*, double*, double*, i32)* @_Z6kernelPdS_S_S_S_S_i to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @0, i64 0, i64 0), i32 -1, i8* null, i8* null, i8* null, i8* null, i32* null)
  ret void
}

declare dso_local i32 @__cudaRegisterFunction(i8**, i8*, i8*, i8*, i32, i8*, i8*, i8*, i8*, i32*)

declare dso_local i32 @__cudaRegisterVar(i8**, i8*, i8*, i8*, i32, i32, i32, i32)

declare dso_local i8** @__cudaRegisterFatBinary(i8*)

define internal void @__cuda_module_ctor(i8* %0) {
entry:
  %1 = call i8** @__cudaRegisterFatBinary(i8* bitcast ({ i32, i32, i8*, i8* }* @__cuda_fatbin_wrapper to i8*))
  store i8** %1, i8*** @__cuda_gpubin_handle, align 8
  call void @__cuda_register_globals(i8** %1)
  call void @__cudaRegisterFatBinaryEnd(i8** %1)
  %2 = call i32 @atexit(void (i8*)* @__cuda_module_dtor)
  ret void
}

declare dso_local void @__cudaRegisterFatBinaryEnd(i8**)

declare dso_local void @__cudaUnregisterFatBinary(i8**)

define internal void @__cuda_module_dtor(i8* %0) {
entry:
  %1 = load i8**, i8*** @__cuda_gpubin_handle, align 8
  call void @__cudaUnregisterFatBinary(i8** %1)
  ret void
}

declare dso_local i32 @atexit(void (i8*)*)

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind readnone speculatable willreturn }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 10, i32 1]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!"clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)"}
