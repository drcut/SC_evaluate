# CUDA toolkit installation path
CUDA_DIR = /usr/local/cuda

# set where the oneapi is installed
ONEAPI_DIR=/opt/intel/oneapi

# set where the llvm compiler is installed
LLVM_DIR=${DPCPP_HOME}

# CUDA toolkit libraries
CUDA_LIB_DIR := $(CUDA_DIR)/lib
ifeq ($(shell uname -m), x86_64)
     ifeq ($(shell if test -d $(CUDA_DIR)/lib64; then echo T; else echo F; fi), T)
     	CUDA_LIB_DIR := $(CUDA_DIR)/lib64
     endif
endif

# select the dpcpp compiler enviroment (clang, oneapi)
DPCPP_ENV=clang

ifeq ($(DPCPP_ENV), clang)
     # Available: NVIDIA_GPU, INTEL_GPU
     DEVICE = INTEL_GPU

     SYCL_ROOT = ${LLVM_DIR}/llvm/build
     SYCL_C = $(SYCL_ROOT)/bin/clang++

     #include oneapi dpct
     DPCT_INCLUDE_DIR = $(ONEAPI_DIR)/dpcpp-ct/latest/include/
     
     SYCL_INCLUDE_DIR = ${SYCL_ROOT}/lib/clang/14.0.0/include/
     SYCL_LIB = ${SYCL_ROOT}/lib/libsycl.so
     DPCPP_FLAGS = -std=c++17 -fsycl -D$(DEVICE) -I $(SYCL_INCLUDE_DIR) -I $(DPCT_INCLUDE_DIR) -L $(SYCL_LIB)

     ifeq ($(DEVICE), NVIDIA_GPU)
          DPCPP_FLAGS += -fsycl-targets=nvptx64-nvidia-cuda
     endif
else
     # Available: CPU, INTEL_GPU
     DEVICE = INTEL_GPU

     SYCL_ROOT = $(ONEAPI_DIR)
     SYCL_C = dpcpp
     SYCL_INCLUDE_DIR = $(SYCL_ROOT)/compiler/latest/linux/include/sycl
     SYCL_LIB = $(SYCL_ROOT)/compiler/latest/linux/lib
     DPCPP_FLAGS = -lsycl -I $(SYCL_INCLUDE_DIR) -D$(DEVICE)
endif